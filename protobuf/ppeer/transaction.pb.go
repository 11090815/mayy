// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: transaction.proto

package ppeer

import (
	pcommon "github.com/11090815/mayy/protobuf/pcommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxValidationCode int32

const (
	TxValidationCode_VALID                        TxValidationCode = 0  // 事务验证成功。
	TxValidationCode_NIL_ENVELOPE                 TxValidationCode = 1  // 事务的 Envelope 为空。
	TxValidationCode_BAD_PAYLOAD                  TxValidationCode = 2  // 事务的有效载荷存在问题。
	TxValidationCode_BAD_COMMON_HEADER            TxValidationCode = 3  // 事务的公共头部存在问题。
	TxValidationCode_BAD_CREATOR_SIGNATURE        TxValidationCode = 4  // 事务的创建者签名存在问题。
	TxValidationCode_INVALID_ENDORSER_TRANSACTION TxValidationCode = 5  // 背书节点为事务的背书无效。
	TxValidationCode_INVALID_CONFIG_TRANSACTION   TxValidationCode = 6  // 配置事务无效。
	TxValidationCode_UNSUPPORTED_TX_PAYLOAD       TxValidationCode = 7  // 不支持的事务有效载荷。
	TxValidationCode_BAD_PROPOSAL_TXID            TxValidationCode = 8  // 提案的事务 ID 存在问题。
	TxValidationCode_DUPLICATE_TXID               TxValidationCode = 9  // 重复出现的事务 ID。
	TxValidationCode_ENDORSEMENT_POLICY_FAILURE   TxValidationCode = 10 // 背书策略失败。
	TxValidationCode_MVCC_READ_CONFLICT           TxValidationCode = 11 // 多版本并发控制读冲突。
	TxValidationCode_PHANTOM_READ_CONFLICT        TxValidationCode = 12 // 读冲突。
	TxValidationCode_UNKNOWN_TX_TYPE              TxValidationCode = 13 // 未知的事务类型。
	TxValidationCode_TARGET_CHAIN_NOT_FOUND       TxValidationCode = 14 // 找不到目标链。
	TxValidationCode_MARSHAL_TX_ERROR             TxValidationCode = 15 // 序列化事务数据出错。
	TxValidationCode_NIL_TXACTION                 TxValidationCode = 16 // 事务操作为空。
	TxValidationCode_EXPIRED_CHAINCODE            TxValidationCode = 17 // 链码已过期。
	TxValidationCode_CHAINCODE_VERSION_CONFLICT   TxValidationCode = 18 // 链码版本冲突。
	TxValidationCode_BAD_HEADER_EXTENSION         TxValidationCode = 19 // 头部扩展字段有问题。
	TxValidationCode_BAD_CHANNEL_HEADER           TxValidationCode = 20 // 通道的头部存在问题。
	TxValidationCode_BAD_RESPONSE_PAYLOAD         TxValidationCode = 21 // 响应的有效载荷存在问题。
	TxValidationCode_BAD_RWSET                    TxValidationCode = 22 // 读写集有问题。
	TxValidationCode_ILLEGAL_WRITESET             TxValidationCode = 23 // 非法的写集。
	TxValidationCode_INVALID_WRITESET             TxValidationCode = 24 // 无效的写集。
	TxValidationCode_INVALID_CHAINCODE            TxValidationCode = 25 // 无效的链码。
	TxValidationCode_NOT_VALIDATED                TxValidationCode = 26 // 未验证。
	TxValidationCode_INVALID_OTHER_REASON         TxValidationCode = 27 // 其他原因导致验证失败。
)

// Enum value maps for TxValidationCode.
var (
	TxValidationCode_name = map[int32]string{
		0:  "VALID",
		1:  "NIL_ENVELOPE",
		2:  "BAD_PAYLOAD",
		3:  "BAD_COMMON_HEADER",
		4:  "BAD_CREATOR_SIGNATURE",
		5:  "INVALID_ENDORSER_TRANSACTION",
		6:  "INVALID_CONFIG_TRANSACTION",
		7:  "UNSUPPORTED_TX_PAYLOAD",
		8:  "BAD_PROPOSAL_TXID",
		9:  "DUPLICATE_TXID",
		10: "ENDORSEMENT_POLICY_FAILURE",
		11: "MVCC_READ_CONFLICT",
		12: "PHANTOM_READ_CONFLICT",
		13: "UNKNOWN_TX_TYPE",
		14: "TARGET_CHAIN_NOT_FOUND",
		15: "MARSHAL_TX_ERROR",
		16: "NIL_TXACTION",
		17: "EXPIRED_CHAINCODE",
		18: "CHAINCODE_VERSION_CONFLICT",
		19: "BAD_HEADER_EXTENSION",
		20: "BAD_CHANNEL_HEADER",
		21: "BAD_RESPONSE_PAYLOAD",
		22: "BAD_RWSET",
		23: "ILLEGAL_WRITESET",
		24: "INVALID_WRITESET",
		25: "INVALID_CHAINCODE",
		26: "NOT_VALIDATED",
		27: "INVALID_OTHER_REASON",
	}
	TxValidationCode_value = map[string]int32{
		"VALID":                        0,
		"NIL_ENVELOPE":                 1,
		"BAD_PAYLOAD":                  2,
		"BAD_COMMON_HEADER":            3,
		"BAD_CREATOR_SIGNATURE":        4,
		"INVALID_ENDORSER_TRANSACTION": 5,
		"INVALID_CONFIG_TRANSACTION":   6,
		"UNSUPPORTED_TX_PAYLOAD":       7,
		"BAD_PROPOSAL_TXID":            8,
		"DUPLICATE_TXID":               9,
		"ENDORSEMENT_POLICY_FAILURE":   10,
		"MVCC_READ_CONFLICT":           11,
		"PHANTOM_READ_CONFLICT":        12,
		"UNKNOWN_TX_TYPE":              13,
		"TARGET_CHAIN_NOT_FOUND":       14,
		"MARSHAL_TX_ERROR":             15,
		"NIL_TXACTION":                 16,
		"EXPIRED_CHAINCODE":            17,
		"CHAINCODE_VERSION_CONFLICT":   18,
		"BAD_HEADER_EXTENSION":         19,
		"BAD_CHANNEL_HEADER":           20,
		"BAD_RESPONSE_PAYLOAD":         21,
		"BAD_RWSET":                    22,
		"ILLEGAL_WRITESET":             23,
		"INVALID_WRITESET":             24,
		"INVALID_CHAINCODE":            25,
		"NOT_VALIDATED":                26,
		"INVALID_OTHER_REASON":         27,
	}
)

func (x TxValidationCode) Enum() *TxValidationCode {
	p := new(TxValidationCode)
	*p = x
	return p
}

func (x TxValidationCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxValidationCode) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_proto_enumTypes[0].Descriptor()
}

func (TxValidationCode) Type() protoreflect.EnumType {
	return &file_transaction_proto_enumTypes[0]
}

func (x TxValidationCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxValidationCode.Descriptor instead.
func (TxValidationCode) EnumDescriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0}
}

// MetaDataKeys 定义了在键级元数据映射中的保留条目。
type MetaDataKeys int32

const (
	MetaDataKeys_VALIDATION_PARAMETER    MetaDataKeys = 0 // 验证参数的元数据键。
	MetaDataKeys_VALIDATION_PARAMETER_V2 MetaDataKeys = 1 // 验证参数的元数据键的第二个版本。
)

// Enum value maps for MetaDataKeys.
var (
	MetaDataKeys_name = map[int32]string{
		0: "VALIDATION_PARAMETER",
		1: "VALIDATION_PARAMETER_V2",
	}
	MetaDataKeys_value = map[string]int32{
		"VALIDATION_PARAMETER":    0,
		"VALIDATION_PARAMETER_V2": 1,
	}
)

func (x MetaDataKeys) Enum() *MetaDataKeys {
	p := new(MetaDataKeys)
	*p = x
	return p
}

func (x MetaDataKeys) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetaDataKeys) Descriptor() protoreflect.EnumDescriptor {
	return file_transaction_proto_enumTypes[1].Descriptor()
}

func (MetaDataKeys) Type() protoreflect.EnumType {
	return &file_transaction_proto_enumTypes[1]
}

func (x MetaDataKeys) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetaDataKeys.Descriptor instead.
func (MetaDataKeys) EnumDescriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1}
}

// ProcessedTransaction 结构体用于封装一个 Envelope，该 Envelope 包含了一个已经处理过的事务 transaction，
// 并且还包含了一个指示该事务是否被提交节点验证的标志。
type ProcessedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionEnvelope *pcommon.Envelope `protobuf:"bytes,1,opt,name=transaction_envelope,json=transactionEnvelope,proto3" json:"transaction_envelope,omitempty"`
	ValidationCode      int32             `protobuf:"varint,2,opt,name=validation_code,json=validationCode,proto3" json:"validation_code,omitempty"`
}

func (x *ProcessedTransaction) Reset() {
	*x = ProcessedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessedTransaction) ProtoMessage() {}

func (x *ProcessedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessedTransaction.ProtoReflect.Descriptor instead.
func (*ProcessedTransaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessedTransaction) GetTransactionEnvelope() *pcommon.Envelope {
	if x != nil {
		return x.TransactionEnvelope
	}
	return nil
}

func (x *ProcessedTransaction) GetValidationCode() int32 {
	if x != nil {
		return x.ValidationCode
	}
	return 0
}

// Transaction 结构体表示要发送给排序服务的事务，一个事务包含一个或多个 TransactionAction。每个 TransactionAction
// 将一个提案与可能的多个操作绑定在一起。事务是原子性的，这意味着要么所有的操作都会被提交，要么都不会被提交。
// 注意，虽然一个事务可能包含多个 Header，但是每个 Header 的 Creator 字段必须相同。
// 一个客户端可以自由的发出多个独立的提案，每个提案都有自己的头部 Header 和请求负载 ChaincodeProposalPayload。
// 每个提案都会独立地获得背书，生成一个操作 ProposalResponsePayload，每个背书者为其生成一个签名。任意数量的提案
// 可以包含在一个事务中，以确保它们会被作为一个整体进行处理（原子性）。
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*TransactionAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetActions() []*TransactionAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// TransactionAction 结构体表示将提案与其操作绑定在一起。头部 Header 中的字段决定了要应用于分类账的操作类型。
type TransactionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header 字段是 ProposalAction 的头部，也是 Proposal 的头部
	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Payload 字段是操作的负载，根据头部中的类型字段定义，对于链码来说，它是 ChaincodeActionPayload。
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *TransactionAction) Reset() {
	*x = TransactionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionAction) ProtoMessage() {}

func (x *TransactionAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionAction.ProtoReflect.Descriptor instead.
func (*TransactionAction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *TransactionAction) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TransactionAction) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// ChaincodeActionPayload 结构体用于 TransactionAction 的负载，当 Header 的类型设置为 CHAINCODE 时使用。
// 它包含了一个 ChaincodeProposalPayload 和一个已背书的操作，应用于分类账。
type ChaincodeActionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChaincodeProposalPayload 字段包含了原始调用的 ChaincodeProposalPayload 消息的字节。
	ChaincodeProposalPayload []byte `protobuf:"bytes,1,opt,name=chaincode_proposal_payload,json=chaincodeProposalPayload,proto3" json:"chaincode_proposal_payload,omitempty"`
	// Action 字段是要应用于分类账的操作列表，它包含了已背书的操作，用于将更改作用于分类账。
	Action *ChaincodeEndorsedAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ChaincodeActionPayload) Reset() {
	*x = ChaincodeActionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeActionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeActionPayload) ProtoMessage() {}

func (x *ChaincodeActionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeActionPayload.ProtoReflect.Descriptor instead.
func (*ChaincodeActionPayload) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *ChaincodeActionPayload) GetChaincodeProposalPayload() []byte {
	if x != nil {
		return x.ChaincodeProposalPayload
	}
	return nil
}

func (x *ChaincodeActionPayload) GetAction() *ChaincodeEndorsedAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// ChaincodeEndorsedAction 结构体用于携带关于特定提案的背书信息。
type ChaincodeEndorsedAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProposalResponsePayload 字段是背书者签名的 ProposalResponsePayload 消息的字节表示形式。
	// 对于 CHAINCODE 类型，ProposalResponsePayload 的扩展字段包含一个 ChaincodeAction。
	ProposalResponsePayload []byte `protobuf:"bytes,1,opt,name=proposal_response_payload,json=proposalResponsePayload,proto3" json:"proposal_response_payload,omitempty"`
	// Endorsements 字段是提案的背书，一般来说是背书节点对 ProposalResponsePayload 字节数组的
	// 签名，这是一个 Endorsement 类型数组，表示可能有多个背书节点对提案进行了背书。
	Endorsements []*Endorsement `protobuf:"bytes,2,rep,name=endorsements,proto3" json:"endorsements,omitempty"`
}

func (x *ChaincodeEndorsedAction) Reset() {
	*x = ChaincodeEndorsedAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeEndorsedAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeEndorsedAction) ProtoMessage() {}

func (x *ChaincodeEndorsedAction) ProtoReflect() protoreflect.Message {
	mi := &file_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeEndorsedAction.ProtoReflect.Descriptor instead.
func (*ChaincodeEndorsedAction) Descriptor() ([]byte, []int) {
	return file_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *ChaincodeEndorsedAction) GetProposalResponsePayload() []byte {
	if x != nil {
		return x.ProposalResponsePayload
	}
	return nil
}

func (x *ChaincodeEndorsedAction) GetEndorsements() []*Endorsement {
	if x != nil {
		return x.Endorsements
	}
	return nil
}

var File_transaction_proto protoreflect.FileDescriptor

var file_transaction_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x0e, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x85, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x14, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x41, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a,
	0x1a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x18, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64,
	0x6f, 0x72, 0x73, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2a, 0xa9, 0x05, 0x0a, 0x10, 0x54, 0x78, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x49, 0x4c, 0x5f, 0x45, 0x4e, 0x56, 0x45, 0x4c,
	0x4f, 0x50, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x47,
	0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x58, 0x5f, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x54, 0x58, 0x49, 0x44, 0x10, 0x08, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x58, 0x49, 0x44, 0x10,
	0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x0a, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x56, 0x43, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x48, 0x41,
	0x4e, 0x54, 0x4f, 0x4d, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49,
	0x43, 0x54, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x54, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c,
	0x5f, 0x54, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x49, 0x4c, 0x5f, 0x54, 0x58, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x15, 0x0a,
	0x11, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x43, 0x4f,
	0x44, 0x45, 0x10, 0x11, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49,
	0x43, 0x54, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x44, 0x5f, 0x48, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x16,
	0x0a, 0x12, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x15,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x57, 0x53, 0x45, 0x54, 0x10, 0x16, 0x12,
	0x14, 0x0a, 0x10, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x53, 0x45, 0x54, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x53, 0x45, 0x54, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x1b, 0x2a,
	0x45, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x18, 0x0a, 0x14, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x5f, 0x56, 0x32, 0x10, 0x01, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39, 0x30, 0x38, 0x31, 0x35, 0x2f, 0x6d, 0x61,
	0x79, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x70, 0x65, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transaction_proto_rawDescOnce sync.Once
	file_transaction_proto_rawDescData = file_transaction_proto_rawDesc
)

func file_transaction_proto_rawDescGZIP() []byte {
	file_transaction_proto_rawDescOnce.Do(func() {
		file_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_transaction_proto_rawDescData)
	})
	return file_transaction_proto_rawDescData
}

var file_transaction_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_transaction_proto_goTypes = []interface{}{
	(TxValidationCode)(0),           // 0: ppeer.TxValidationCode
	(MetaDataKeys)(0),               // 1: ppeer.MetaDataKeys
	(*ProcessedTransaction)(nil),    // 2: ppeer.ProcessedTransaction
	(*Transaction)(nil),             // 3: ppeer.Transaction
	(*TransactionAction)(nil),       // 4: ppeer.TransactionAction
	(*ChaincodeActionPayload)(nil),  // 5: ppeer.ChaincodeActionPayload
	(*ChaincodeEndorsedAction)(nil), // 6: ppeer.ChaincodeEndorsedAction
	(*pcommon.Envelope)(nil),        // 7: pcommon.Envelope
	(*Endorsement)(nil),             // 8: ppeer.Endorsement
}
var file_transaction_proto_depIdxs = []int32{
	7, // 0: ppeer.ProcessedTransaction.transaction_envelope:type_name -> pcommon.Envelope
	4, // 1: ppeer.Transaction.actions:type_name -> ppeer.TransactionAction
	6, // 2: ppeer.ChaincodeActionPayload.action:type_name -> ppeer.ChaincodeEndorsedAction
	8, // 3: ppeer.ChaincodeEndorsedAction.endorsements:type_name -> ppeer.Endorsement
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_transaction_proto_init() }
func file_transaction_proto_init() {
	if File_transaction_proto != nil {
		return
	}
	file_proposal_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeActionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeEndorsedAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transaction_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_transaction_proto_goTypes,
		DependencyIndexes: file_transaction_proto_depIdxs,
		EnumInfos:         file_transaction_proto_enumTypes,
		MessageInfos:      file_transaction_proto_msgTypes,
	}.Build()
	File_transaction_proto = out.File
	file_transaction_proto_rawDesc = nil
	file_transaction_proto_goTypes = nil
	file_transaction_proto_depIdxs = nil
}
