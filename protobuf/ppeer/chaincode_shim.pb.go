// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: chaincode_shim.proto

package ppeer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type 枚举类型，定义了诸如注册、初始化、交易等操作类型。
type ChaincodeMessage_Type int32

const (
	ChaincodeMessage_UNDEFINED             ChaincodeMessage_Type = 0
	ChaincodeMessage_REGISTER              ChaincodeMessage_Type = 1
	ChaincodeMessage_REGISTERED            ChaincodeMessage_Type = 2
	ChaincodeMessage_INIT                  ChaincodeMessage_Type = 3
	ChaincodeMessage_READY                 ChaincodeMessage_Type = 4
	ChaincodeMessage_TRANSACTION           ChaincodeMessage_Type = 5
	ChaincodeMessage_COMPLETED             ChaincodeMessage_Type = 6
	ChaincodeMessage_ERROR                 ChaincodeMessage_Type = 7
	ChaincodeMessage_GET_STATE             ChaincodeMessage_Type = 8
	ChaincodeMessage_PUT_STATE             ChaincodeMessage_Type = 9
	ChaincodeMessage_DEL_STATE             ChaincodeMessage_Type = 10
	ChaincodeMessage_INVOKE_CHAINCODE      ChaincodeMessage_Type = 11
	ChaincodeMessage_RESPONSE              ChaincodeMessage_Type = 12
	ChaincodeMessage_GET_STATE_BY_RANGE    ChaincodeMessage_Type = 13
	ChaincodeMessage_GET_QUERY_RESULT      ChaincodeMessage_Type = 14
	ChaincodeMessage_QUERY_STATE_NEXT      ChaincodeMessage_Type = 15
	ChaincodeMessage_QUERY_STATE_CLOSE     ChaincodeMessage_Type = 16
	ChaincodeMessage_KEEPALIVE             ChaincodeMessage_Type = 17
	ChaincodeMessage_GET_HISTORY_FOR_KEY   ChaincodeMessage_Type = 18
	ChaincodeMessage_GET_STATE_METADATA    ChaincodeMessage_Type = 19
	ChaincodeMessage_PUT_STATE_METADATA    ChaincodeMessage_Type = 20
	ChaincodeMessage_GET_PRIVATE_DATA_HASH ChaincodeMessage_Type = 21
	ChaincodeMessage_PURGE_PRIVATE_DATA    ChaincodeMessage_Type = 22
)

// Enum value maps for ChaincodeMessage_Type.
var (
	ChaincodeMessage_Type_name = map[int32]string{
		0:  "UNDEFINED",
		1:  "REGISTER",
		2:  "REGISTERED",
		3:  "INIT",
		4:  "READY",
		5:  "TRANSACTION",
		6:  "COMPLETED",
		7:  "ERROR",
		8:  "GET_STATE",
		9:  "PUT_STATE",
		10: "DEL_STATE",
		11: "INVOKE_CHAINCODE",
		12: "RESPONSE",
		13: "GET_STATE_BY_RANGE",
		14: "GET_QUERY_RESULT",
		15: "QUERY_STATE_NEXT",
		16: "QUERY_STATE_CLOSE",
		17: "KEEPALIVE",
		18: "GET_HISTORY_FOR_KEY",
		19: "GET_STATE_METADATA",
		20: "PUT_STATE_METADATA",
		21: "GET_PRIVATE_DATA_HASH",
		22: "PURGE_PRIVATE_DATA",
	}
	ChaincodeMessage_Type_value = map[string]int32{
		"UNDEFINED":             0,
		"REGISTER":              1,
		"REGISTERED":            2,
		"INIT":                  3,
		"READY":                 4,
		"TRANSACTION":           5,
		"COMPLETED":             6,
		"ERROR":                 7,
		"GET_STATE":             8,
		"PUT_STATE":             9,
		"DEL_STATE":             10,
		"INVOKE_CHAINCODE":      11,
		"RESPONSE":              12,
		"GET_STATE_BY_RANGE":    13,
		"GET_QUERY_RESULT":      14,
		"QUERY_STATE_NEXT":      15,
		"QUERY_STATE_CLOSE":     16,
		"KEEPALIVE":             17,
		"GET_HISTORY_FOR_KEY":   18,
		"GET_STATE_METADATA":    19,
		"PUT_STATE_METADATA":    20,
		"GET_PRIVATE_DATA_HASH": 21,
		"PURGE_PRIVATE_DATA":    22,
	}
)

func (x ChaincodeMessage_Type) Enum() *ChaincodeMessage_Type {
	p := new(ChaincodeMessage_Type)
	*p = x
	return p
}

func (x ChaincodeMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChaincodeMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_chaincode_shim_proto_enumTypes[0].Descriptor()
}

func (ChaincodeMessage_Type) Type() protoreflect.EnumType {
	return &file_chaincode_shim_proto_enumTypes[0]
}

func (x ChaincodeMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChaincodeMessage_Type.Descriptor instead.
func (ChaincodeMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{0, 0}
}

// ChaincodeMessage 结构体用于在链码与区块链之间传递消息和执行操作。
type ChaincodeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type 枚举类型，定义了诸如注册、初始化、交易等操作类型。
	Type ChaincodeMessage_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ppeer.ChaincodeMessage_Type" json:"type,omitempty"`
	// Timestamp 表示时间的时间戳，用于记录消息的创建时间。
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Payload 表示消息的有效载荷，以字节形式存储。
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Txid 表示与消息相关的交易的标识符。
	Txid string `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	// Proposal 表示包含签名的提案。
	Proposal *SignedProposal `protobuf:"bytes,5,opt,name=proposal,proto3" json:"proposal,omitempty"`
	// ChaincodeEvent 表示由链码发出的事件，该事件仅在初始化或调用链码时使用，被储存在区块的哈希中的 TransactionResult 字段中。
	ChaincodeEvent *ChaincodeEvent `protobuf:"bytes,6,opt,name=chaincode_event,json=chaincodeEvent,proto3" json:"chaincode_event,omitempty"`
	// ChannelId 表示消息所属的通道的标识符。
	ChannelId string `protobuf:"bytes,7,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ChaincodeMessage) Reset() {
	*x = ChaincodeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeMessage) ProtoMessage() {}

func (x *ChaincodeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeMessage.ProtoReflect.Descriptor instead.
func (*ChaincodeMessage) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{0}
}

func (x *ChaincodeMessage) GetType() ChaincodeMessage_Type {
	if x != nil {
		return x.Type
	}
	return ChaincodeMessage_UNDEFINED
}

func (x *ChaincodeMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ChaincodeMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ChaincodeMessage) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ChaincodeMessage) GetProposal() *SignedProposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *ChaincodeMessage) GetChaincodeEvent() *ChaincodeEvent {
	if x != nil {
		return x.ChaincodeEvent
	}
	return nil
}

func (x *ChaincodeMessage) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

// GetState 用于读取账本中的状态。
type GetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key 要从账本中获取状态的键。
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Collection 是一个可选字段，用于指定从私有状态集合中获取状态。
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *GetState) Reset() {
	*x = GetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetState) ProtoMessage() {}

func (x *GetState) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetState.ProtoReflect.Descriptor instead.
func (*GetState) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{1}
}

func (x *GetState) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetState) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

// GetStateMetadata 用于获取状态的元数据。
type GetStateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key 要获取元数据的状态的键。
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Collection 可选字段，用于指定从私有状态集合中获取元数据。
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *GetStateMetadata) Reset() {
	*x = GetStateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateMetadata) ProtoMessage() {}

func (x *GetStateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateMetadata.ProtoReflect.Descriptor instead.
func (*GetStateMetadata) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{2}
}

func (x *GetStateMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetStateMetadata) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

// PutState 用于将状态写入事务。
type PutState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key 要写入的状态的键。
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Values 要写入的状态的值。
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Collection 可选字段，用于指定将状态写入私有集合。
	Collection string `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *PutState) Reset() {
	*x = PutState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutState) ProtoMessage() {}

func (x *PutState) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutState.ProtoReflect.Descriptor instead.
func (*PutState) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{3}
}

func (x *PutState) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutState) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutState) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

// PutStateMetadata 用于将状态的元数据写入事务。
type PutStateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key 要写入的状态的键。
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Collection 可选字段，用于指定将元数据写入私有集合。
	Collection string         `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	Metadata   *StateMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PutStateMetadata) Reset() {
	*x = PutStateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutStateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutStateMetadata) ProtoMessage() {}

func (x *PutStateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutStateMetadata.ProtoReflect.Descriptor instead.
func (*PutStateMetadata) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{4}
}

func (x *PutStateMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PutStateMetadata) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *PutStateMetadata) GetMetadata() *StateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// DelState 用于在事务的写集合中记录删除操作的状态。
type DelState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key 要删除的状态的键。
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Collection 可选字段，用于指定将删除操作记录在私有集合中。
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *DelState) Reset() {
	*x = DelState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelState) ProtoMessage() {}

func (x *DelState) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelState.ProtoReflect.Descriptor instead.
func (*DelState) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{5}
}

func (x *DelState) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DelState) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

// PurgePrivateState 用于在事务的写集中记录清除私有状态的操作。
type PurgePrivateState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key 要清除的私有状态的键。
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Collection 可选字段，用于指定将清除操作记录在私有写集中。
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *PurgePrivateState) Reset() {
	*x = PurgePrivateState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgePrivateState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgePrivateState) ProtoMessage() {}

func (x *PurgePrivateState) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgePrivateState.ProtoReflect.Descriptor instead.
func (*PurgePrivateState) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{6}
}

func (x *PurgePrivateState) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PurgePrivateState) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

// GetStateByRange 用于范围查询的操作。
type GetStateByRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StartKey 范围查询的起始键。
	StartKey string `protobuf:"bytes,1,opt,name=startKey,proto3" json:"startKey,omitempty"`
	// EndKey 范围查询的结束键。
	EndKey string `protobuf:"bytes,2,opt,name=endKey,proto3" json:"endKey,omitempty"`
	// Collection 可选字段，用于指定在私有数据上执行范围查询。
	Collection string `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	// Metadata 用于存储查询元数据的字节表示形式。
	Metadata []byte `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetStateByRange) Reset() {
	*x = GetStateByRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateByRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateByRange) ProtoMessage() {}

func (x *GetStateByRange) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateByRange.ProtoReflect.Descriptor instead.
func (*GetStateByRange) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{7}
}

func (x *GetStateByRange) GetStartKey() string {
	if x != nil {
		return x.StartKey
	}
	return ""
}

func (x *GetStateByRange) GetEndKey() string {
	if x != nil {
		return x.EndKey
	}
	return ""
}

func (x *GetStateByRange) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *GetStateByRange) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GetQueryResult 消息定义了一个用于获取查询结果的有效负载。
type GetQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query 查询字符串，以由底层状态数据库支持的形式表示。
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Collection 指定查询私有数据时执行的集合，若未指定，则查询将在公共数据上执行。
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	// Metadata QueryMetadata 结构体的字节表示形式。
	Metadata []byte `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetQueryResult) Reset() {
	*x = GetQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryResult) ProtoMessage() {}

func (x *GetQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryResult.ProtoReflect.Descriptor instead.
func (*GetQueryResult) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{8}
}

func (x *GetQueryResult) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetQueryResult) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *GetQueryResult) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// QueryMetadata 定义了 GetStateByRange 和 GetQueryResult 的查询元数据。
type QueryMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PageSize 要获取的记录数量。
	PageSize int32 `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // Bookmark 书签，用于从特定位置开始获取记录。
}

func (x *QueryMetadata) Reset() {
	*x = QueryMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMetadata) ProtoMessage() {}

func (x *QueryMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMetadata.ProtoReflect.Descriptor instead.
func (*QueryMetadata) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{9}
}

func (x *QueryMetadata) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// GetHistoryForKey 定义了一个用于获取历史的有效载荷。
type GetHistoryForKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key 要获取历史值的键。
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *GetHistoryForKey) Reset() {
	*x = GetHistoryForKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoryForKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoryForKey) ProtoMessage() {}

func (x *GetHistoryForKey) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoryForKey.ProtoReflect.Descriptor instead.
func (*GetHistoryForKey) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{10}
}

func (x *GetHistoryForKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// QueryStateNext 定义了一个用于获取下一个查询状态的有效载荷。
type QueryStateNext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id 查询的标识符。
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryStateNext) Reset() {
	*x = QueryStateNext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStateNext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStateNext) ProtoMessage() {}

func (x *QueryStateNext) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStateNext.ProtoReflect.Descriptor instead.
func (*QueryStateNext) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{11}
}

func (x *QueryStateNext) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// QueryStateClose 定义了一个用于关闭查询状态的有效载荷。
type QueryStateClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id 查询的标识符。
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *QueryStateClose) Reset() {
	*x = QueryStateClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStateClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStateClose) ProtoMessage() {}

func (x *QueryStateClose) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStateClose.ProtoReflect.Descriptor instead.
func (*QueryStateClose) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{12}
}

func (x *QueryStateClose) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// QueryResultBytes 定义了一个存储由对等方返回的记录的字节表示形式的有效载荷。
type QueryResultBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResultBytes 返回的记录的字节表示形式的有效载荷。
	ResultBytes []byte `protobuf:"bytes,1,opt,name=resultBytes,proto3" json:"resultBytes,omitempty"`
}

func (x *QueryResultBytes) Reset() {
	*x = QueryResultBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResultBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResultBytes) ProtoMessage() {}

func (x *QueryResultBytes) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResultBytes.ProtoReflect.Descriptor instead.
func (*QueryResultBytes) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{13}
}

func (x *QueryResultBytes) GetResultBytes() []byte {
	if x != nil {
		return x.ResultBytes
	}
	return nil
}

// QueryResponse 消息被对等方作为 GetStateRange、GetQueryResult 和 GetHistoryForKey 的结果返回。
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Results 一组 QueryResultBytes。
	Results []*QueryResultBytes `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// HasMore 一个 bool 标志，表示是否需要从对等方获取更多结果。
	HasMore bool `protobuf:"varint,2,opt,name=has_more,json=hasMore,proto3" json:"has_more,omitempty"`
	// Id 事务 id。
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata QueryResponseMetadata 的字节表示形式。
	Metadata []byte `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{14}
}

func (x *QueryResponse) GetResults() []*QueryResultBytes {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *QueryResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *QueryResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *QueryResponse) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// QueryResponseMetadata 定义了 QueryResponse 的元数据。
type QueryResponseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FetchedRecordsCount 从账本中获取的记录数量。
	FetchedRecordsCount int32 `protobuf:"varint,1,opt,name=fetched_records_count,json=fetchedRecordsCount,proto3" json:"fetched_records_count,omitempty"`
	// Bookmark 用于从特定地方继续查询。
	Bookmark string `protobuf:"bytes,2,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
}

func (x *QueryResponseMetadata) Reset() {
	*x = QueryResponseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponseMetadata) ProtoMessage() {}

func (x *QueryResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponseMetadata.ProtoReflect.Descriptor instead.
func (*QueryResponseMetadata) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{15}
}

func (x *QueryResponseMetadata) GetFetchedRecordsCount() int32 {
	if x != nil {
		return x.FetchedRecordsCount
	}
	return 0
}

func (x *QueryResponseMetadata) GetBookmark() string {
	if x != nil {
		return x.Bookmark
	}
	return ""
}

// StateMetadata 定义了状态元数据的键值对。
type StateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metakey 元数据的键。
	Metakey string `protobuf:"bytes,1,opt,name=metakey,proto3" json:"metakey,omitempty"`
	// Value 元数据值的字节表示形式。
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StateMetadata) Reset() {
	*x = StateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMetadata) ProtoMessage() {}

func (x *StateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMetadata.ProtoReflect.Descriptor instead.
func (*StateMetadata) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{16}
}

func (x *StateMetadata) GetMetakey() string {
	if x != nil {
		return x.Metakey
	}
	return ""
}

func (x *StateMetadata) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// StateMetadataResult 定义了状态元数据的查询结果。
type StateMetadataResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entries 一组状态元数据的 StateMetadata。
	Entries []*StateMetadata `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *StateMetadataResult) Reset() {
	*x = StateMetadataResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaincode_shim_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateMetadataResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateMetadataResult) ProtoMessage() {}

func (x *StateMetadataResult) ProtoReflect() protoreflect.Message {
	mi := &file_chaincode_shim_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateMetadataResult.ProtoReflect.Descriptor instead.
func (*StateMetadataResult) Descriptor() ([]byte, []int) {
	return file_chaincode_shim_proto_rawDescGZIP(), []int{17}
}

func (x *StateMetadataResult) GetEntries() []*StateMetadata {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_chaincode_shim_proto protoreflect.FileDescriptor

var file_chaincode_shim_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x15, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xeb, 0x05, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x22, 0xaa, 0x03, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0d,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x45, 0x45, 0x50, 0x41, 0x4c, 0x49, 0x56, 0x45,
	0x10, 0x11, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x45, 0x54, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x55, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x55, 0x52, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x16, 0x22, 0x3c,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x08, 0x50, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3c,
	0x0a, 0x08, 0x44, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x11,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x0d, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x24, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x20,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x21, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x0d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x67, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x15, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x3f,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x61, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x45, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x32, 0x54, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x17, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x32, 0x4c, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x17, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e,
	0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39, 0x30, 0x38, 0x31,
	0x35, 0x2f, 0x6d, 0x61, 0x79, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x70, 0x70, 0x65, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chaincode_shim_proto_rawDescOnce sync.Once
	file_chaincode_shim_proto_rawDescData = file_chaincode_shim_proto_rawDesc
)

func file_chaincode_shim_proto_rawDescGZIP() []byte {
	file_chaincode_shim_proto_rawDescOnce.Do(func() {
		file_chaincode_shim_proto_rawDescData = protoimpl.X.CompressGZIP(file_chaincode_shim_proto_rawDescData)
	})
	return file_chaincode_shim_proto_rawDescData
}

var file_chaincode_shim_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chaincode_shim_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_chaincode_shim_proto_goTypes = []interface{}{
	(ChaincodeMessage_Type)(0),    // 0: ppeer.ChaincodeMessage.Type
	(*ChaincodeMessage)(nil),      // 1: ppeer.ChaincodeMessage
	(*GetState)(nil),              // 2: ppeer.GetState
	(*GetStateMetadata)(nil),      // 3: ppeer.GetStateMetadata
	(*PutState)(nil),              // 4: ppeer.PutState
	(*PutStateMetadata)(nil),      // 5: ppeer.PutStateMetadata
	(*DelState)(nil),              // 6: ppeer.DelState
	(*PurgePrivateState)(nil),     // 7: ppeer.PurgePrivateState
	(*GetStateByRange)(nil),       // 8: ppeer.GetStateByRange
	(*GetQueryResult)(nil),        // 9: ppeer.GetQueryResult
	(*QueryMetadata)(nil),         // 10: ppeer.QueryMetadata
	(*GetHistoryForKey)(nil),      // 11: ppeer.GetHistoryForKey
	(*QueryStateNext)(nil),        // 12: ppeer.QueryStateNext
	(*QueryStateClose)(nil),       // 13: ppeer.QueryStateClose
	(*QueryResultBytes)(nil),      // 14: ppeer.QueryResultBytes
	(*QueryResponse)(nil),         // 15: ppeer.QueryResponse
	(*QueryResponseMetadata)(nil), // 16: ppeer.QueryResponseMetadata
	(*StateMetadata)(nil),         // 17: ppeer.StateMetadata
	(*StateMetadataResult)(nil),   // 18: ppeer.StateMetadataResult
	(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
	(*SignedProposal)(nil),        // 20: ppeer.SignedProposal
	(*ChaincodeEvent)(nil),        // 21: ppeer.ChaincodeEvent
}
var file_chaincode_shim_proto_depIdxs = []int32{
	0,  // 0: ppeer.ChaincodeMessage.type:type_name -> ppeer.ChaincodeMessage.Type
	19, // 1: ppeer.ChaincodeMessage.timestamp:type_name -> google.protobuf.Timestamp
	20, // 2: ppeer.ChaincodeMessage.proposal:type_name -> ppeer.SignedProposal
	21, // 3: ppeer.ChaincodeMessage.chaincode_event:type_name -> ppeer.ChaincodeEvent
	17, // 4: ppeer.PutStateMetadata.metadata:type_name -> ppeer.StateMetadata
	14, // 5: ppeer.QueryResponse.results:type_name -> ppeer.QueryResultBytes
	17, // 6: ppeer.StateMetadataResult.entries:type_name -> ppeer.StateMetadata
	1,  // 7: ppeer.ChaincodeSupport.Register:input_type -> ppeer.ChaincodeMessage
	1,  // 8: ppeer.Chaincode.Connect:input_type -> ppeer.ChaincodeMessage
	1,  // 9: ppeer.ChaincodeSupport.Register:output_type -> ppeer.ChaincodeMessage
	1,  // 10: ppeer.Chaincode.Connect:output_type -> ppeer.ChaincodeMessage
	9,  // [9:11] is the sub-list for method output_type
	7,  // [7:9] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_chaincode_shim_proto_init() }
func file_chaincode_shim_proto_init() {
	if File_chaincode_shim_proto != nil {
		return
	}
	file_chaincode_event_proto_init()
	file_proposal_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chaincode_shim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutStateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgePrivateState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateByRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoryForKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStateNext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStateClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResultBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaincode_shim_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateMetadataResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chaincode_shim_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_chaincode_shim_proto_goTypes,
		DependencyIndexes: file_chaincode_shim_proto_depIdxs,
		EnumInfos:         file_chaincode_shim_proto_enumTypes,
		MessageInfos:      file_chaincode_shim_proto_msgTypes,
	}.Build()
	File_chaincode_shim_proto = out.File
	file_chaincode_shim_proto_rawDesc = nil
	file_chaincode_shim_proto_goTypes = nil
	file_chaincode_shim_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChaincodeSupportClient is the client API for ChaincodeSupport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeSupportClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (ChaincodeSupport_RegisterClient, error)
}

type chaincodeSupportClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeSupportClient(cc grpc.ClientConnInterface) ChaincodeSupportClient {
	return &chaincodeSupportClient{cc}
}

func (c *chaincodeSupportClient) Register(ctx context.Context, opts ...grpc.CallOption) (ChaincodeSupport_RegisterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChaincodeSupport_serviceDesc.Streams[0], "/ppeer.ChaincodeSupport/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeSupportRegisterClient{stream}
	return x, nil
}

type ChaincodeSupport_RegisterClient interface {
	Send(*ChaincodeMessage) error
	Recv() (*ChaincodeMessage, error)
	grpc.ClientStream
}

type chaincodeSupportRegisterClient struct {
	grpc.ClientStream
}

func (x *chaincodeSupportRegisterClient) Send(m *ChaincodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chaincodeSupportRegisterClient) Recv() (*ChaincodeMessage, error) {
	m := new(ChaincodeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChaincodeSupportServer is the server API for ChaincodeSupport service.
type ChaincodeSupportServer interface {
	Register(ChaincodeSupport_RegisterServer) error
}

// UnimplementedChaincodeSupportServer can be embedded to have forward compatible implementations.
type UnimplementedChaincodeSupportServer struct {
}

func (*UnimplementedChaincodeSupportServer) Register(ChaincodeSupport_RegisterServer) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}

func RegisterChaincodeSupportServer(s *grpc.Server, srv ChaincodeSupportServer) {
	s.RegisterService(&_ChaincodeSupport_serviceDesc, srv)
}

func _ChaincodeSupport_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChaincodeSupportServer).Register(&chaincodeSupportRegisterServer{stream})
}

type ChaincodeSupport_RegisterServer interface {
	Send(*ChaincodeMessage) error
	Recv() (*ChaincodeMessage, error)
	grpc.ServerStream
}

type chaincodeSupportRegisterServer struct {
	grpc.ServerStream
}

func (x *chaincodeSupportRegisterServer) Send(m *ChaincodeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chaincodeSupportRegisterServer) Recv() (*ChaincodeMessage, error) {
	m := new(ChaincodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChaincodeSupport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ppeer.ChaincodeSupport",
	HandlerType: (*ChaincodeSupportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _ChaincodeSupport_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chaincode_shim.proto",
}

// ChaincodeClient is the client API for Chaincode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChaincodeClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Chaincode_ConnectClient, error)
}

type chaincodeClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeClient(cc grpc.ClientConnInterface) ChaincodeClient {
	return &chaincodeClient{cc}
}

func (c *chaincodeClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Chaincode_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chaincode_serviceDesc.Streams[0], "/ppeer.Chaincode/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &chaincodeConnectClient{stream}
	return x, nil
}

type Chaincode_ConnectClient interface {
	Send(*ChaincodeMessage) error
	Recv() (*ChaincodeMessage, error)
	grpc.ClientStream
}

type chaincodeConnectClient struct {
	grpc.ClientStream
}

func (x *chaincodeConnectClient) Send(m *ChaincodeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chaincodeConnectClient) Recv() (*ChaincodeMessage, error) {
	m := new(ChaincodeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChaincodeServer is the server API for Chaincode service.
type ChaincodeServer interface {
	Connect(Chaincode_ConnectServer) error
}

// UnimplementedChaincodeServer can be embedded to have forward compatible implementations.
type UnimplementedChaincodeServer struct {
}

func (*UnimplementedChaincodeServer) Connect(Chaincode_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterChaincodeServer(s *grpc.Server, srv ChaincodeServer) {
	s.RegisterService(&_Chaincode_serviceDesc, srv)
}

func _Chaincode_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChaincodeServer).Connect(&chaincodeConnectServer{stream})
}

type Chaincode_ConnectServer interface {
	Send(*ChaincodeMessage) error
	Recv() (*ChaincodeMessage, error)
	grpc.ServerStream
}

type chaincodeConnectServer struct {
	grpc.ServerStream
}

func (x *chaincodeConnectServer) Send(m *ChaincodeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chaincodeConnectServer) Recv() (*ChaincodeMessage, error) {
	m := new(ChaincodeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chaincode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ppeer.Chaincode",
	HandlerType: (*ChaincodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Chaincode_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chaincode_shim.proto",
}
