// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: proposal.proto

package ppeer

import (
	pcommon "github.com/11090815/mayy/protobuf/pcommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SignedProposal 这个结构对于签署包含头部和有效载荷的 proposal 而言是非常必要
// 的，如果没有这个结构，则不得不连接头和有效载荷来验证签名，对于大型有效载荷来说
// 可能会很昂贵。
//
// 当背书节点收到一个 SignedProposal 消息时，它应该验证其中的签名，这个验证需要执行
// 以下步骤：
//  1. 验证用于生成签名的证书的有效性，只要 ProposalBytes 被解码为一个 Proposal
//     消息，并且 Proposal.Header 被解码为一个 Header 消息，则证书可用，虽然在验
//     证之前进行解码可能不是理想的行为。
//  2. 验证该证书是否受信任（由受信任 CA 签发）；
//  3. 验证签名是否有效；
//  4. 检测重放攻击。
type SignedProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signature 关于 ProposalBytes 的签名，该签名将使用客户端（即 SignedProposal
	// 消息的创建者）的证书进行验证，证书被包含在 Proposal 的 Header 中，而 Proposal
	// 被编码为 ProposalBytes 字节数组。
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// ProposalBytes 将 Proposal 编码为字节数组得到的 ProposalBytes。
	ProposalBytes []byte `protobuf:"bytes,2,opt,name=proposal_bytes,json=proposalBytes,proto3" json:"proposal_bytes,omitempty"`
}

func (x *SignedProposal) Reset() {
	*x = SignedProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedProposal) ProtoMessage() {}

func (x *SignedProposal) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedProposal.ProtoReflect.Descriptor instead.
func (*SignedProposal) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{0}
}

func (x *SignedProposal) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedProposal) GetProposalBytes() []byte {
	if x != nil {
		return x.ProposalBytes
	}
	return nil
}

// Proposal 被发送给背书节点以获得背书支持，一个 proposal 包含以下内容：
//  1. Header：既是 proposal 的头部也是交易的头部，它用于计算哈希值和签名，Header 具有
//     所有 proposal 和交易的共有字段，此外它还具有额外定制化的类型字段，其中一个例子是
//     ChaincodeHeaderExtension 消息，用于扩展 CHAINCODE 类型的 Header。
//  2. Payload：其类型取决于 Header 的 Type 字段。
//  3. Extension：其类型取决于 Header 的 Type 字段。
//
// 下面给出一个例子：对于 CHAINCODE 类型，我们有以下内容：
//  1. Header：是一个拥有 Extension 字段为 ChaincodeHeaderExtension 消息的 Header 消息。
//  2. Payload：是 ChaincodeProposalPayload 消息。
//  3. Extension：可能是 ChaincodeAction，可用来要求背书节点对特定 ChaincodeAction 进行背书。
type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header 是 Header 结构体序列化化后的字节数组表现形式。
	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Payload Header 字段中的 Type 字段可指定 Payload 存储的数据类型。
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// Extension 扩展字段存储的内容取决于 Header 字段中的 Type 字段，如果 Type 是 CHAINCODE，
	// 则 Extension 可能是 ChaincodeAction 结构体的字节数组表现形式。
	Extension []byte `protobuf:"bytes,3,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{1}
}

func (x *Proposal) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Proposal) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Proposal) GetExtension() []byte {
	if x != nil {
		return x.Extension
	}
	return nil
}

// ChaincodeHeaderExtension 是头部的扩展信息，当头部的类型是 CHAINCODE 时，此扩展将会被使用，用于确定
// 哪个链码会被调用然后应该出现在账本中。
type ChaincodeHeaderExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChaincodeId *ChaincodeID `protobuf:"bytes,1,opt,name=chaincode_id,json=chaincodeId,proto3" json:"chaincode_id,omitempty"`
}

func (x *ChaincodeHeaderExtension) Reset() {
	*x = ChaincodeHeaderExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeHeaderExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeHeaderExtension) ProtoMessage() {}

func (x *ChaincodeHeaderExtension) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeHeaderExtension.ProtoReflect.Descriptor instead.
func (*ChaincodeHeaderExtension) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{2}
}

func (x *ChaincodeHeaderExtension) GetChaincodeId() *ChaincodeID {
	if x != nil {
		return x.ChaincodeId
	}
	return nil
}

// ChaincodeProposalPayload 是用于区块链提案的有效载荷信息，用于在 Header 类型为 CHAINCODE 时使用，它
// 包含了此次调用所使用的参数。
type ChaincodeProposalPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input 包含此次调用的参数，如果此次调用新的链码，则 ESCC/VSCC 也包含在此字段中，通常情况下，它是一
	// 个序列化的 ChaincodeInvocationSpec。
	Input []byte `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// TransientMap 可能用于实现某种方式的应用级机密性的数据，此字段的内容应始终从交易中省略，并从账本中
	// 排除。
	TransientMap map[string][]byte `protobuf:"bytes,2,rep,name=TransientMap,proto3" json:"TransientMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChaincodeProposalPayload) Reset() {
	*x = ChaincodeProposalPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeProposalPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeProposalPayload) ProtoMessage() {}

func (x *ChaincodeProposalPayload) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeProposalPayload.ProtoReflect.Descriptor instead.
func (*ChaincodeProposalPayload) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{3}
}

func (x *ChaincodeProposalPayload) GetInput() []byte {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ChaincodeProposalPayload) GetTransientMap() map[string][]byte {
	if x != nil {
		return x.TransientMap
	}
	return nil
}

// ChaincodeAction 包含了链码执行的结果、响应和事件。
type ChaincodeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Results 包含由执行此次调用的链码产生的读集合写集，它是一个字节数组。
	Results []byte `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
	// Events 包含由链码生成的事件，只包含一个序列化的 ChaincodeEvent。
	Events []byte `protobuf:"bytes,2,opt,name=events,proto3" json:"events,omitempty"`
	// Response 包含执行此次调用链码的结果，它是一个 Response 类型。
	Response *Response `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	// ChaincodeId 包含执行此次调用的链码的 id，背书节点在模拟提案时会设置它为所调用的链码的 ChaincodeID。
	// 提交者将验证其与最新链码版本匹配。通过添加 ChaincodeID，可以在一个交易中出现多个 ChaincodeAction 的
	// 可能性。
	ChaincodeId *ChaincodeID `protobuf:"bytes,4,opt,name=chaincode_id,json=chaincodeId,proto3" json:"chaincode_id,omitempty"`
}

func (x *ChaincodeAction) Reset() {
	*x = ChaincodeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeAction) ProtoMessage() {}

func (x *ChaincodeAction) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeAction.ProtoReflect.Descriptor instead.
func (*ChaincodeAction) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{4}
}

func (x *ChaincodeAction) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ChaincodeAction) GetEvents() []byte {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ChaincodeAction) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ChaincodeAction) GetChaincodeId() *ChaincodeID {
	if x != nil {
		return x.ChaincodeId
	}
	return nil
}

// ProposalResponse 结构体表示背书节点对请求的响应，当客户端请求在链码上执行操作时，背书节点将返回
// 此消息作为响应。响应包含了背书节点对请求的结果（成功或错误），以及对该操作的描述和背书节点的签名。
// 如果足够数量的不同的背书节点就相同的操作达成一致并生成相应的签名，那么可以生成并发送一个交易进行
// 排序。
type ProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version 消息协议版本。
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Timestamp 消息创建时的时间戳，由发送方定义。
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Response 响应消息，指示操作的背书是否成功。
	Response *Response `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	// Payload 响应的有效载荷，它是 ProposalResponsePayload 结构体序列化后的字节数组。
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// Endorsement 背书节点对有效负载的签名。
	Endorsement *Endorsement `protobuf:"bytes,5,opt,name=endorsement,proto3" json:"endorsement,omitempty"`
	// Interest 从模拟提案中得出的链码利益。
	Interest *ChaincodeInterest `protobuf:"bytes,6,opt,name=interest,proto3" json:"interest,omitempty"`
}

func (x *ProposalResponse) Reset() {
	*x = ProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalResponse) ProtoMessage() {}

func (x *ProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalResponse.ProtoReflect.Descriptor instead.
func (*ProposalResponse) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{5}
}

func (x *ProposalResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProposalResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ProposalResponse) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ProposalResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ProposalResponse) GetEndorsement() *Endorsement {
	if x != nil {
		return x.Endorsement
	}
	return nil
}

func (x *ProposalResponse) GetInterest() *ChaincodeInterest {
	if x != nil {
		return x.Interest
	}
	return nil
}

// Response 结构体用于表示一个类似于 HTTP 响应的响应消息。
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status 表示响应状态，遵循 HTTP 状态码的规范。
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// Message 表示与响应代码相关的消息，可以用于提供关于响应的更多详细信息。
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Payload 表示可以与此响应一起发送的元数据，可以用于传递任意类型的二进制数据。
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{6}
}

func (x *Response) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Response) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// ProposalResponsePayload 结构体用于表示一个提案响应的有效载荷，它在客户端的请求和背书者对该请求的响
// 应之间起到一个“桥梁”的作用，具体来说，对于链码，它包含了提案的哈希表示以及扩展字段中链码状态变化和事
// 件的表示。
type ProposalResponsePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PropoaslHash 表示触发此响应的提案的哈希值，哈希值用于在异步系统中将响应与其提案关联起来，通常哈
	// 希会覆盖整个提案消息（逐字节）。
	ProposalHash []byte `protobuf:"bytes,1,opt,name=proposal_hash,json=proposalHash,proto3" json:"proposal_hash,omitempty"`
	// Extension 应解析为某个特定类型的消息，在提案响应中，扩展字段的类型取决于客户端在最初发送提案时所
	// 选择的提案类型。具体来说，这些信息存储在 Header 的 Type 中。对于链码，是一个 ChaincodeAction 消
	// 息。
	Extension []byte `protobuf:"bytes,2,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ProposalResponsePayload) Reset() {
	*x = ProposalResponsePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalResponsePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalResponsePayload) ProtoMessage() {}

func (x *ProposalResponsePayload) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalResponsePayload.ProtoReflect.Descriptor instead.
func (*ProposalResponsePayload) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{7}
}

func (x *ProposalResponsePayload) GetProposalHash() []byte {
	if x != nil {
		return x.ProposalHash
	}
	return nil
}

func (x *ProposalResponsePayload) GetExtension() []byte {
	if x != nil {
		return x.Extension
	}
	return nil
}

type Endorsement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Endorser 表示背书者的身份，例如其证书，用于标识背书者的身份信息。
	Endorser []byte `protobuf:"bytes,1,opt,name=endorser,proto3" json:"endorser,omitempty"`
	// Signature 表示提案响应中包含的有效载荷与背书者的证书连接在一起后的签名，即 sign(ProposalResponse.Payload + Endorser)，
	// 它用于证明背书者对提案响应的认可。
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Endorsement) Reset() {
	*x = Endorsement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endorsement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endorsement) ProtoMessage() {}

func (x *Endorsement) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endorsement.ProtoReflect.Descriptor instead.
func (*Endorsement) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{8}
}

func (x *Endorsement) GetEndorser() []byte {
	if x != nil {
		return x.Endorser
	}
	return nil
}

func (x *Endorsement) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// ChaincodeInterest 结构体用于定义对于特定单个链码调用的背书的兴趣，多个链码表示链码对链码的调用。
type ChaincodeInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chaincodes 表示对于一组链码调用的兴趣，每个 ChaincodeCall 表示一个链码调用的信息，它包括链码
	// 名称、调用函数和传入的参数等。
	Chaincodes []*ChaincodeCall `protobuf:"bytes,1,rep,name=chaincodes,proto3" json:"chaincodes,omitempty"`
}

func (x *ChaincodeInterest) Reset() {
	*x = ChaincodeInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeInterest) ProtoMessage() {}

func (x *ChaincodeInterest) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeInterest.ProtoReflect.Descriptor instead.
func (*ChaincodeInterest) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{9}
}

func (x *ChaincodeInterest) GetChaincodes() []*ChaincodeCall {
	if x != nil {
		return x.Chaincodes
	}
	return nil
}

// ChaincodeCall 结构体用于定义对链码的调用，它包含与链码相关的集合。ChaincodeCall 结构体的目的是指定对链
// 码的调用，并提供与调用相关的信息，如链码名称、集合名称、私有数据读取需求、命名空间写入需求以及背书策略等。
// 这些信息用于确保在调用链码时满足相应的需求和策略。
type ChaincodeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name 表示要调用的链码的名称。
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// CollectionNames 表示与链码相关的集合的名称，集合是用于存储链码私有数据的特定数据集。
	CollectionNames []string `protobuf:"bytes,2,rep,name=collection_names,json=collectionNames,proto3" json:"collection_names,omitempty"`
	// NoPrivateReads 指示我们需不需要从私有数据进行读取。如果为 true，则表示调用链码时不需要读取私有数据。
	NoPrivateReads bool `protobuf:"varint,3,opt,name=no_private_reads,json=noPrivateReads,proto3" json:"no_private_reads,omitempty"`
	// NoPublicWrites 指示我们需不需要向链码的命名空间进行写入。如果为 true，则不需要向链码的命名空间写入数据。
	NoPublicWrites bool `protobuf:"varint,4,opt,name=no_public_writes,json=noPublicWrites,proto3" json:"no_public_writes,omitempty"`
	// KeyPolicies 表示与写入集中具有基于状态的背书策略相关联的状态的签名策略集合。
	KeyPolicies []*pcommon.SignaturePolicyEnvelope `protobuf:"bytes,5,rep,name=key_policies,json=keyPolicies,proto3" json:"key_policies,omitempty"`
	// DisregardNamespacePolicy 指示我们希不希望忽略命名空间的背书策略。如果为 true，则表示希望在调用链码时
	// 忽略命名空间的背书策略。
	DisregardNamespacePolicy bool `protobuf:"varint,6,opt,name=disregard_namespace_policy,json=disregardNamespacePolicy,proto3" json:"disregard_namespace_policy,omitempty"`
}

func (x *ChaincodeCall) Reset() {
	*x = ChaincodeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proposal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeCall) ProtoMessage() {}

func (x *ChaincodeCall) ProtoReflect() protoreflect.Message {
	mi := &file_proposal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeCall.ProtoReflect.Descriptor instead.
func (*ChaincodeCall) Descriptor() ([]byte, []int) {
	return file_proposal_proto_rawDescGZIP(), []int{10}
}

func (x *ChaincodeCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChaincodeCall) GetCollectionNames() []string {
	if x != nil {
		return x.CollectionNames
	}
	return nil
}

func (x *ChaincodeCall) GetNoPrivateReads() bool {
	if x != nil {
		return x.NoPrivateReads
	}
	return false
}

func (x *ChaincodeCall) GetNoPublicWrites() bool {
	if x != nil {
		return x.NoPublicWrites
	}
	return false
}

func (x *ChaincodeCall) GetKeyPolicies() []*pcommon.SignaturePolicyEnvelope {
	if x != nil {
		return x.KeyPolicies
	}
	return nil
}

func (x *ChaincodeCall) GetDisregardNamespacePolicy() bool {
	if x != nil {
		return x.DisregardNamespacePolicy
	}
	return false
}

var File_proposal_proto protoreflect.FileDescriptor

var file_proposal_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x0e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x22, 0x5a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x51, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x1a, 0x3f, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01,
	0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x99, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x5c, 0x0a, 0x17, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0b, 0x45, 0x6e, 0x64,
	0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x49, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa5, 0x02,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x72, 0x65,
	0x67, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x69, 0x73,
	0x72, 0x65, 0x67, 0x61, 0x72, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39, 0x30, 0x38, 0x31, 0x35, 0x2f, 0x6d, 0x61, 0x79,
	0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x70, 0x65, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proposal_proto_rawDescOnce sync.Once
	file_proposal_proto_rawDescData = file_proposal_proto_rawDesc
)

func file_proposal_proto_rawDescGZIP() []byte {
	file_proposal_proto_rawDescOnce.Do(func() {
		file_proposal_proto_rawDescData = protoimpl.X.CompressGZIP(file_proposal_proto_rawDescData)
	})
	return file_proposal_proto_rawDescData
}

var file_proposal_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proposal_proto_goTypes = []interface{}{
	(*SignedProposal)(nil),                  // 0: ppeer.SignedProposal
	(*Proposal)(nil),                        // 1: ppeer.Proposal
	(*ChaincodeHeaderExtension)(nil),        // 2: ppeer.ChaincodeHeaderExtension
	(*ChaincodeProposalPayload)(nil),        // 3: ppeer.ChaincodeProposalPayload
	(*ChaincodeAction)(nil),                 // 4: ppeer.ChaincodeAction
	(*ProposalResponse)(nil),                // 5: ppeer.ProposalResponse
	(*Response)(nil),                        // 6: ppeer.Response
	(*ProposalResponsePayload)(nil),         // 7: ppeer.ProposalResponsePayload
	(*Endorsement)(nil),                     // 8: ppeer.Endorsement
	(*ChaincodeInterest)(nil),               // 9: ppeer.ChaincodeInterest
	(*ChaincodeCall)(nil),                   // 10: ppeer.ChaincodeCall
	nil,                                     // 11: ppeer.ChaincodeProposalPayload.TransientMapEntry
	(*ChaincodeID)(nil),                     // 12: ppeer.ChaincodeID
	(*timestamppb.Timestamp)(nil),           // 13: google.protobuf.Timestamp
	(*pcommon.SignaturePolicyEnvelope)(nil), // 14: pcommon.SignaturePolicyEnvelope
}
var file_proposal_proto_depIdxs = []int32{
	12, // 0: ppeer.ChaincodeHeaderExtension.chaincode_id:type_name -> ppeer.ChaincodeID
	11, // 1: ppeer.ChaincodeProposalPayload.TransientMap:type_name -> ppeer.ChaincodeProposalPayload.TransientMapEntry
	6,  // 2: ppeer.ChaincodeAction.response:type_name -> ppeer.Response
	12, // 3: ppeer.ChaincodeAction.chaincode_id:type_name -> ppeer.ChaincodeID
	13, // 4: ppeer.ProposalResponse.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 5: ppeer.ProposalResponse.response:type_name -> ppeer.Response
	8,  // 6: ppeer.ProposalResponse.endorsement:type_name -> ppeer.Endorsement
	9,  // 7: ppeer.ProposalResponse.interest:type_name -> ppeer.ChaincodeInterest
	10, // 8: ppeer.ChaincodeInterest.chaincodes:type_name -> ppeer.ChaincodeCall
	14, // 9: ppeer.ChaincodeCall.key_policies:type_name -> pcommon.SignaturePolicyEnvelope
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proposal_proto_init() }
func file_proposal_proto_init() {
	if File_proposal_proto != nil {
		return
	}
	file_chaincode_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proposal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeHeaderExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeProposalPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalResponsePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endorsement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proposal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proposal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proposal_proto_goTypes,
		DependencyIndexes: file_proposal_proto_depIdxs,
		MessageInfos:      file_proposal_proto_msgTypes,
	}.Build()
	File_proposal_proto = out.File
	file_proposal_proto_rawDesc = nil
	file_proposal_proto_goTypes = nil
	file_proposal_proto_depIdxs = nil
}
