// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: resources.proto

package ppeer

import (
	pcommon "github.com/11090815/mayy/protobuf/pcommon"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChaincodeIdentifier 链码标识符标识一段链码。对于一个对等体来接受这个链码的调用，安装的代码
// 的散列必须匹配，安装命令中包含的版本字符串也必须匹配。
type ChaincodeIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hash 链码字节的哈希值，哈希值用于验证已安装的链码与被调用的链码是否一致。
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Version 与安装命令一起提供的用户友好的人类可读名称，用于标识链码的版本。
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ChaincodeIdentifier) Reset() {
	*x = ChaincodeIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeIdentifier) ProtoMessage() {}

func (x *ChaincodeIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeIdentifier.ProtoReflect.Descriptor instead.
func (*ChaincodeIdentifier) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{0}
}

func (x *ChaincodeIdentifier) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ChaincodeIdentifier) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// ChaincodeValidation 可以为特定的链码指定验证逻辑，以确保只有满足指定条件的事务才会被接收和执行。
type ChaincodeValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name 指定用于验证事务的代码的名称，默认情况下，使用标准的 VSCC（Validation System Chaincode）
	// 验证机制。VSCC 验证机制利用背书策略来检查是否包含了足够数量的背书签名。
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Argument 当使用 VSCC 验证机制时，该字段用于传递给验证实现的参数，它是一个字节数组，需要使用特定
	// 的编码方式进行序列化，以便验证过程可以正确解析参数。
	Argument []byte `protobuf:"bytes,2,opt,name=argument,proto3" json:"argument,omitempty"`
}

func (x *ChaincodeValidation) Reset() {
	*x = ChaincodeValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeValidation) ProtoMessage() {}

func (x *ChaincodeValidation) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeValidation.ProtoReflect.Descriptor instead.
func (*ChaincodeValidation) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{1}
}

func (x *ChaincodeValidation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChaincodeValidation) GetArgument() []byte {
	if x != nil {
		return x.Argument
	}
	return nil
}

// VSCCArgs 结构体的主要目的是将背书策略的引用传递给验证实现，以便验证实现可以根据指定的背书策略来验证事
// 务。通过指定正确的背书策略引用，可以根据需求定制链码的验证机制，确保只有满足背书策略要求的事务才能被接
// 受和执行。
type VSCCArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EndorsementPolicyRef 一个命名引用，指向一个背书策略，背书策略确定了在验证事务时需要多少个背书签名。
	// 它使用路径形式的命名约定，例如 Channel/Application/Writes。此字段指定了一个指向背书策略的引用，验证
	// 实现将根据该引用找到相应的背书策略。
	EndorsementPolicyRef string `protobuf:"bytes,1,opt,name=endorsement_policy_ref,json=endorsementPolicyRef,proto3" json:"endorsement_policy_ref,omitempty"`
}

func (x *VSCCArgs) Reset() {
	*x = VSCCArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VSCCArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VSCCArgs) ProtoMessage() {}

func (x *VSCCArgs) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VSCCArgs.ProtoReflect.Descriptor instead.
func (*VSCCArgs) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{2}
}

func (x *VSCCArgs) GetEndorsementPolicyRef() string {
	if x != nil {
		return x.EndorsementPolicyRef
	}
	return ""
}

// ChaincodeEndorsement 结构体用于指示 peer 节点如何对事务进行背书。
type ChaincodeEndorsement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name 指定用于背书的代码的名称。默认情况下，使用标准的 ECSS（Endorsement System Chaincode）背书机
	// 制。ESCC 背书机制模拟了提案生成读写集并使用 peer 节点的本地签名身份对结果进行签名的过程。
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ChaincodeEndorsement) Reset() {
	*x = ChaincodeEndorsement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeEndorsement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeEndorsement) ProtoMessage() {}

func (x *ChaincodeEndorsement) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeEndorsement.ProtoReflect.Descriptor instead.
func (*ChaincodeEndorsement) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{3}
}

func (x *ChaincodeEndorsement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ConfigTree 结构体用于封装通道（channel）和资源（resources）的配置信息
type ConfigTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChannelConfig 通道的配置信息，以 pcommon.Config 类型表示，通道配置包括通道的名称、
	// 背书策略、访问控制规则等。
	ChannelConfig *pcommon.Config `protobuf:"bytes,1,opt,name=channel_config,json=channelConfig,proto3" json:"channel_config,omitempty"`
	// ResourcesConfig 资源的配置信息，以 pcommon.Config 类型表示，资源配置包括链码的背书策略、
	// 访问控制规则、背书策略等。
	ResourcesConfig *pcommon.Config `protobuf:"bytes,2,opt,name=resources_config,json=resourcesConfig,proto3" json:"resources_config,omitempty"`
}

func (x *ConfigTree) Reset() {
	*x = ConfigTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigTree) ProtoMessage() {}

func (x *ConfigTree) ProtoReflect() protoreflect.Message {
	mi := &file_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigTree.ProtoReflect.Descriptor instead.
func (*ConfigTree) Descriptor() ([]byte, []int) {
	return file_resources_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigTree) GetChannelConfig() *pcommon.Config {
	if x != nil {
		return x.ChannelConfig
	}
	return nil
}

func (x *ConfigTree) GetResourcesConfig() *pcommon.Config {
	if x != nil {
		return x.ResourcesConfig
	}
	return nil
}

var File_resources_proto protoreflect.FileDescriptor

var file_resources_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x70, 0x65, 0x65, 0x72, 0x1a, 0x16, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x43, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x40, 0x0a, 0x08,
	0x56, 0x53, 0x43, 0x43, 0x41, 0x72, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x22, 0x2a,
	0x0a, 0x14, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x72, 0x65, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3a, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x29, 0x5a,
	0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39,
	0x30, 0x38, 0x31, 0x35, 0x2f, 0x6d, 0x61, 0x79, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x70, 0x70, 0x65, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resources_proto_rawDescOnce sync.Once
	file_resources_proto_rawDescData = file_resources_proto_rawDesc
)

func file_resources_proto_rawDescGZIP() []byte {
	file_resources_proto_rawDescOnce.Do(func() {
		file_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_resources_proto_rawDescData)
	})
	return file_resources_proto_rawDescData
}

var file_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_resources_proto_goTypes = []interface{}{
	(*ChaincodeIdentifier)(nil),  // 0: ppeer.ChaincodeIdentifier
	(*ChaincodeValidation)(nil),  // 1: ppeer.ChaincodeValidation
	(*VSCCArgs)(nil),             // 2: ppeer.VSCCArgs
	(*ChaincodeEndorsement)(nil), // 3: ppeer.ChaincodeEndorsement
	(*ConfigTree)(nil),           // 4: ppeer.ConfigTree
	(*pcommon.Config)(nil),       // 5: pcommon.Config
}
var file_resources_proto_depIdxs = []int32{
	5, // 0: ppeer.ConfigTree.channel_config:type_name -> pcommon.Config
	5, // 1: ppeer.ConfigTree.resources_config:type_name -> pcommon.Config
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_resources_proto_init() }
func file_resources_proto_init() {
	if File_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VSCCArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeEndorsement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resources_proto_goTypes,
		DependencyIndexes: file_resources_proto_depIdxs,
		MessageInfos:      file_resources_proto_msgTypes,
	}.Build()
	File_resources_proto = out.File
	file_resources_proto_rawDesc = nil
	file_resources_proto_goTypes = nil
	file_resources_proto_depIdxs = nil
}
