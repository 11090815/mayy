// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: lifecycle.proto

package plifecycle

import (
	ppeer "github.com/11090815/mayy/protobuf/ppeer"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// InstallChaincodeArgs 被用作 _lifecycle.InstallChaincode 方法的参数。
type InstallChaincodeArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChaincodeInstallPackage 链码安装包的字节流。这应该是一个序列化的 lifecycle.ChaincodePackage。
	ChaincodeInstallPackage []byte `protobuf:"bytes,1,opt,name=chaincode_install_package,json=chaincodeInstallPackage,proto3" json:"chaincode_install_package,omitempty"`
}

func (x *InstallChaincodeArgs) Reset() {
	*x = InstallChaincodeArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallChaincodeArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallChaincodeArgs) ProtoMessage() {}

func (x *InstallChaincodeArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallChaincodeArgs.ProtoReflect.Descriptor instead.
func (*InstallChaincodeArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{0}
}

func (x *InstallChaincodeArgs) GetChaincodeInstallPackage() []byte {
	if x != nil {
		return x.ChaincodeInstallPackage
	}
	return nil
}

// InstallChaincodeResult _lifecycle.InstallChaincode 方法返回的消息。
type InstallChaincodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PackageId 安装链码包的 ID。
	PackageId string `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	// Label 链码的标签。
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *InstallChaincodeResult) Reset() {
	*x = InstallChaincodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallChaincodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallChaincodeResult) ProtoMessage() {}

func (x *InstallChaincodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallChaincodeResult.ProtoReflect.Descriptor instead.
func (*InstallChaincodeResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{1}
}

func (x *InstallChaincodeResult) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *InstallChaincodeResult) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// QueryInstalledChaincodeArgs 被用作 _lifecycle.QueryInstalledChaincode 方法的参数。
type QueryInstalledChaincodeArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PackageId 是要查询的链码包的ID。
	PackageId string `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
}

func (x *QueryInstalledChaincodeArgs) Reset() {
	*x = QueryInstalledChaincodeArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstalledChaincodeArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstalledChaincodeArgs) ProtoMessage() {}

func (x *QueryInstalledChaincodeArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstalledChaincodeArgs.ProtoReflect.Descriptor instead.
func (*QueryInstalledChaincodeArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{2}
}

func (x *QueryInstalledChaincodeArgs) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

// QueryInstalledChaincodeResult 是 _lifecycle.QueryInstalledChaincode 方法返回的消息。
type QueryInstalledChaincodeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PackageId 是被查询的链码包的ID。
	PackageId string `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	// Label 被查询的链码的标签。
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// References 链码列表的映射。
	References map[string]*QueryInstalledChaincodeResult_References `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryInstalledChaincodeResult) Reset() {
	*x = QueryInstalledChaincodeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstalledChaincodeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstalledChaincodeResult) ProtoMessage() {}

func (x *QueryInstalledChaincodeResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstalledChaincodeResult.ProtoReflect.Descriptor instead.
func (*QueryInstalledChaincodeResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{3}
}

func (x *QueryInstalledChaincodeResult) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *QueryInstalledChaincodeResult) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *QueryInstalledChaincodeResult) GetReferences() map[string]*QueryInstalledChaincodeResult_References {
	if x != nil {
		return x.References
	}
	return nil
}

// GetInstalledChaincodePackageArgs 结构体包含一个字段 PackageId，用于指定要获取的已安装链码的 ID
type GetInstalledChaincodePackageArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId string `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
}

func (x *GetInstalledChaincodePackageArgs) Reset() {
	*x = GetInstalledChaincodePackageArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstalledChaincodePackageArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstalledChaincodePackageArgs) ProtoMessage() {}

func (x *GetInstalledChaincodePackageArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstalledChaincodePackageArgs.ProtoReflect.Descriptor instead.
func (*GetInstalledChaincodePackageArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{4}
}

func (x *GetInstalledChaincodePackageArgs) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

// GetInstalledChaincodePackageResult 结构体包含一个字段 ChaincodeInstallPackage，用于存储已安装链码的安装包数据
type GetInstalledChaincodePackageResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChaincodeInstallPackage []byte `protobuf:"bytes,1,opt,name=chaincode_install_package,json=chaincodeInstallPackage,proto3" json:"chaincode_install_package,omitempty"`
}

func (x *GetInstalledChaincodePackageResult) Reset() {
	*x = GetInstalledChaincodePackageResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInstalledChaincodePackageResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInstalledChaincodePackageResult) ProtoMessage() {}

func (x *GetInstalledChaincodePackageResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInstalledChaincodePackageResult.ProtoReflect.Descriptor instead.
func (*GetInstalledChaincodePackageResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{5}
}

func (x *GetInstalledChaincodePackageResult) GetChaincodeInstallPackage() []byte {
	if x != nil {
		return x.ChaincodeInstallPackage
	}
	return nil
}

// QueryInstalledChaincodesArgs 结构体是查询已安装链码的参数，目前为空。在将来可能会扩展为具有其他参数的结构体。
type QueryInstalledChaincodesArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryInstalledChaincodesArgs) Reset() {
	*x = QueryInstalledChaincodesArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstalledChaincodesArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstalledChaincodesArgs) ProtoMessage() {}

func (x *QueryInstalledChaincodesArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstalledChaincodesArgs.ProtoReflect.Descriptor instead.
func (*QueryInstalledChaincodesArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{6}
}

// QueryInstalledChaincodesResult 结构体是查询已安装链码的结果，包含了已安装链码的信息。它包含一个字段
// InstalledChaincodes，用于存储已安装链码的列表。通过该结构体，可以查询已安装链码的信息，包括链码的安
// 装包 ID、标签以及引用了该链码的链码定义的通道名称和链码版本。这可以帮助在链码的管理和升级过程中了解链
// 码的使用情况。
type QueryInstalledChaincodesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstalledChaincodes []*QueryInstalledChaincodesResult_InstalledChaincode `protobuf:"bytes,1,rep,name=installed_chaincodes,json=installedChaincodes,proto3" json:"installed_chaincodes,omitempty"`
}

func (x *QueryInstalledChaincodesResult) Reset() {
	*x = QueryInstalledChaincodesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstalledChaincodesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstalledChaincodesResult) ProtoMessage() {}

func (x *QueryInstalledChaincodesResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstalledChaincodesResult.ProtoReflect.Descriptor instead.
func (*QueryInstalledChaincodesResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{7}
}

func (x *QueryInstalledChaincodesResult) GetInstalledChaincodes() []*QueryInstalledChaincodesResult_InstalledChaincode {
	if x != nil {
		return x.InstalledChaincodes
	}
	return nil
}

// ApproveChaincodeDefinitionForMyOrgArgs 是用作 _lifecycle.ApproveChaincodeDefinitionForMyOrg 函数的参数消息。它包含了用于批准链码定义的各种属性。
type ApproveChaincodeDefinitionForMyOrgArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence 表示链码定义的序列号。
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Name 表示链码的名称。
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Version 表示链码的版本。
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// EndorsementPlugin 表示链码的背书插件。
	EndorsementPlugin string `protobuf:"bytes,4,opt,name=endorsement_plugin,json=endorsementPlugin,proto3" json:"endorsement_plugin,omitempty"`
	// ValidationPlugin 表示链码的验证插件。
	ValidationPlugin string `protobuf:"bytes,5,opt,name=validation_plugin,json=validationPlugin,proto3" json:"validation_plugin,omitempty"`
	// ValidationParameter 表示链码的验证参数。
	ValidationParameter []byte `protobuf:"bytes,6,opt,name=validation_parameter,json=validationParameter,proto3" json:"validation_parameter,omitempty"`
	// Collections 表示链码的集合配置包。
	Collections *ppeer.CollectionConfigPackage `protobuf:"bytes,7,opt,name=collections,proto3" json:"collections,omitempty"`
	// InitRequired 表示链码是否需要初始化。
	InitRequired bool `protobuf:"varint,8,opt,name=init_required,json=initRequired,proto3" json:"init_required,omitempty"`
	// Source 表示链码来源。
	Source *ChaincodeSource `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) Reset() {
	*x = ApproveChaincodeDefinitionForMyOrgArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveChaincodeDefinitionForMyOrgArgs) ProtoMessage() {}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveChaincodeDefinitionForMyOrgArgs.ProtoReflect.Descriptor instead.
func (*ApproveChaincodeDefinitionForMyOrgArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{8}
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) GetEndorsementPlugin() string {
	if x != nil {
		return x.EndorsementPlugin
	}
	return ""
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) GetValidationPlugin() string {
	if x != nil {
		return x.ValidationPlugin
	}
	return ""
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) GetValidationParameter() []byte {
	if x != nil {
		return x.ValidationParameter
	}
	return nil
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) GetCollections() *ppeer.CollectionConfigPackage {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) GetInitRequired() bool {
	if x != nil {
		return x.InitRequired
	}
	return false
}

func (x *ApproveChaincodeDefinitionForMyOrgArgs) GetSource() *ChaincodeSource {
	if x != nil {
		return x.Source
	}
	return nil
}

// ChaincodeSource 结构体表示链码的来源信息。
type ChaincodeSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ChaincodeSource_Unavailable_
	//	*ChaincodeSource_LocalPackage
	Type isChaincodeSource_Type `protobuf_oneof:"Type"`
}

func (x *ChaincodeSource) Reset() {
	*x = ChaincodeSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeSource) ProtoMessage() {}

func (x *ChaincodeSource) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeSource.ProtoReflect.Descriptor instead.
func (*ChaincodeSource) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{9}
}

func (m *ChaincodeSource) GetType() isChaincodeSource_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ChaincodeSource) GetUnavailable() *ChaincodeSource_Unavailable {
	if x, ok := x.GetType().(*ChaincodeSource_Unavailable_); ok {
		return x.Unavailable
	}
	return nil
}

func (x *ChaincodeSource) GetLocalPackage() *ChaincodeSource_Local {
	if x, ok := x.GetType().(*ChaincodeSource_LocalPackage); ok {
		return x.LocalPackage
	}
	return nil
}

type isChaincodeSource_Type interface {
	isChaincodeSource_Type()
}

type ChaincodeSource_Unavailable_ struct {
	Unavailable *ChaincodeSource_Unavailable `protobuf:"bytes,1,opt,name=unavailable,proto3,oneof"`
}

type ChaincodeSource_LocalPackage struct {
	LocalPackage *ChaincodeSource_Local `protobuf:"bytes,2,opt,name=local_package,json=localPackage,proto3,oneof"`
}

func (*ChaincodeSource_Unavailable_) isChaincodeSource_Type() {}

func (*ChaincodeSource_LocalPackage) isChaincodeSource_Type() {}

// ApproveChaincodeDefinitionForMyOrgResult 该消息是 _lifecycle.ApproveChaincodeDefinitionForMyOrg 方法返回的结果消息。
// 目前该消息为空，但未来可能会扩展其内容。
type ApproveChaincodeDefinitionForMyOrgResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApproveChaincodeDefinitionForMyOrgResult) Reset() {
	*x = ApproveChaincodeDefinitionForMyOrgResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveChaincodeDefinitionForMyOrgResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveChaincodeDefinitionForMyOrgResult) ProtoMessage() {}

func (x *ApproveChaincodeDefinitionForMyOrgResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveChaincodeDefinitionForMyOrgResult.ProtoReflect.Descriptor instead.
func (*ApproveChaincodeDefinitionForMyOrgResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{10}
}

// CommitChaincodeDefinitionArgs 该结构体用作 _lifecycle.CommitChaincodeDefinition 方法的参数。
type CommitChaincodeDefinitionArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence 表示链码定义的序列号。
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Name 表示链码的名称。
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Version 表示链码的版本号。
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// EndorsementPlugin 表示链码的背书插件。
	EndorsementPlugin string `protobuf:"bytes,4,opt,name=endorsement_plugin,json=endorsementPlugin,proto3" json:"endorsement_plugin,omitempty"`
	// ValidationPlugin 表示链码的验证插件。
	ValidationPlugin string `protobuf:"bytes,5,opt,name=validation_plugin,json=validationPlugin,proto3" json:"validation_plugin,omitempty"`
	// ValidationParameter 表示链码的验证参数。
	ValidationParameter []byte `protobuf:"bytes,6,opt,name=validation_parameter,json=validationParameter,proto3" json:"validation_parameter,omitempty"`
	// Collections 表示链码的集合配置包。
	Collections *ppeer.CollectionConfigPackage `protobuf:"bytes,7,opt,name=collections,proto3" json:"collections,omitempty"`
	// InitRequired 表示链码是否需要初始化。
	InitRequired bool `protobuf:"varint,8,opt,name=init_required,json=initRequired,proto3" json:"init_required,omitempty"`
}

func (x *CommitChaincodeDefinitionArgs) Reset() {
	*x = CommitChaincodeDefinitionArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitChaincodeDefinitionArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitChaincodeDefinitionArgs) ProtoMessage() {}

func (x *CommitChaincodeDefinitionArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitChaincodeDefinitionArgs.ProtoReflect.Descriptor instead.
func (*CommitChaincodeDefinitionArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{11}
}

func (x *CommitChaincodeDefinitionArgs) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CommitChaincodeDefinitionArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommitChaincodeDefinitionArgs) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CommitChaincodeDefinitionArgs) GetEndorsementPlugin() string {
	if x != nil {
		return x.EndorsementPlugin
	}
	return ""
}

func (x *CommitChaincodeDefinitionArgs) GetValidationPlugin() string {
	if x != nil {
		return x.ValidationPlugin
	}
	return ""
}

func (x *CommitChaincodeDefinitionArgs) GetValidationParameter() []byte {
	if x != nil {
		return x.ValidationParameter
	}
	return nil
}

func (x *CommitChaincodeDefinitionArgs) GetCollections() *ppeer.CollectionConfigPackage {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *CommitChaincodeDefinitionArgs) GetInitRequired() bool {
	if x != nil {
		return x.InitRequired
	}
	return false
}

// CommitChaincodeDefinitionResult 该结构体是通过 _lifecycle.CommitChaincodeDefinition 方法返回的结果消息。
// 目前该消息为空，但未来可能会扩展其内容。
type CommitChaincodeDefinitionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitChaincodeDefinitionResult) Reset() {
	*x = CommitChaincodeDefinitionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitChaincodeDefinitionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitChaincodeDefinitionResult) ProtoMessage() {}

func (x *CommitChaincodeDefinitionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitChaincodeDefinitionResult.ProtoReflect.Descriptor instead.
func (*CommitChaincodeDefinitionResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{12}
}

// CheckCommitReadinessArgs 该结构体用作 _lifecycle.CheckCommitReadiness 方法的参数。
type CheckCommitReadinessArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence 表示链码定义的序列号。
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Name 表示链码的名称。
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Version 表示链码的版本号。
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// EndorsementPlugin 表示链码的背书插件。
	EndorsementPlugin string `protobuf:"bytes,4,opt,name=endorsement_plugin,json=endorsementPlugin,proto3" json:"endorsement_plugin,omitempty"`
	// ValidationPlugin 表示链码的验证插件。
	ValidationPlugin string `protobuf:"bytes,5,opt,name=validation_plugin,json=validationPlugin,proto3" json:"validation_plugin,omitempty"`
	// ValidationParameter 表示链码的验证参数。
	ValidationParameter []byte `protobuf:"bytes,6,opt,name=validation_parameter,json=validationParameter,proto3" json:"validation_parameter,omitempty"`
	// Collections 表示链码的集合配置包。
	Collections *ppeer.CollectionConfigPackage `protobuf:"bytes,7,opt,name=collections,proto3" json:"collections,omitempty"`
	// InitRequired 表示链码是否需要初始化。
	InitRequired bool `protobuf:"varint,8,opt,name=init_required,json=initRequired,proto3" json:"init_required,omitempty"`
}

func (x *CheckCommitReadinessArgs) Reset() {
	*x = CheckCommitReadinessArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitReadinessArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitReadinessArgs) ProtoMessage() {}

func (x *CheckCommitReadinessArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitReadinessArgs.ProtoReflect.Descriptor instead.
func (*CheckCommitReadinessArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{13}
}

func (x *CheckCommitReadinessArgs) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CheckCommitReadinessArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckCommitReadinessArgs) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CheckCommitReadinessArgs) GetEndorsementPlugin() string {
	if x != nil {
		return x.EndorsementPlugin
	}
	return ""
}

func (x *CheckCommitReadinessArgs) GetValidationPlugin() string {
	if x != nil {
		return x.ValidationPlugin
	}
	return ""
}

func (x *CheckCommitReadinessArgs) GetValidationParameter() []byte {
	if x != nil {
		return x.ValidationParameter
	}
	return nil
}

func (x *CheckCommitReadinessArgs) GetCollections() *ppeer.CollectionConfigPackage {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *CheckCommitReadinessArgs) GetInitRequired() bool {
	if x != nil {
		return x.InitRequired
	}
	return false
}

// CheckCommitReadinessResult 该结构体被用于调用 _lifecycle.CheckCommitReadiness 方法时返回的结果消息。
type CheckCommitReadinessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Approvals 该映射（map），将组织（orgs）与对提供的定义（args）的批准（true/false）对应起来。
	// 通过查询该结果，可以判断各个组织是否已经批准了特定的链码定义。
	Approvals map[string]bool `protobuf:"bytes,1,rep,name=approvals,proto3" json:"approvals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CheckCommitReadinessResult) Reset() {
	*x = CheckCommitReadinessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCommitReadinessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCommitReadinessResult) ProtoMessage() {}

func (x *CheckCommitReadinessResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCommitReadinessResult.ProtoReflect.Descriptor instead.
func (*CheckCommitReadinessResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{14}
}

func (x *CheckCommitReadinessResult) GetApprovals() map[string]bool {
	if x != nil {
		return x.Approvals
	}
	return nil
}

// QueryApprovedChaincodeDefinitionArgs 该结构体被用作 _lifecycle.QueryApprovedChaincodeDefinition 方法的参数。
// 它包含了查询已批准的链码定义所需的信息，包括链码名称（name）和序列号（sequence）。
type QueryApprovedChaincodeDefinitionArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence int64  `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *QueryApprovedChaincodeDefinitionArgs) Reset() {
	*x = QueryApprovedChaincodeDefinitionArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryApprovedChaincodeDefinitionArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryApprovedChaincodeDefinitionArgs) ProtoMessage() {}

func (x *QueryApprovedChaincodeDefinitionArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryApprovedChaincodeDefinitionArgs.ProtoReflect.Descriptor instead.
func (*QueryApprovedChaincodeDefinitionArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{15}
}

func (x *QueryApprovedChaincodeDefinitionArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryApprovedChaincodeDefinitionArgs) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type QueryApprovedChaincodeDefinitionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence 表示链码定义的序列号。
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Version 表示链码的版本。
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// EndorsementPlugin 表示链码的背书插件。
	EndorsementPlugin string `protobuf:"bytes,3,opt,name=endorsement_plugin,json=endorsementPlugin,proto3" json:"endorsement_plugin,omitempty"`
	// ValidationPlugin 表示链码的验证插件。
	ValidationPlugin string `protobuf:"bytes,4,opt,name=validation_plugin,json=validationPlugin,proto3" json:"validation_plugin,omitempty"`
	// ValidationParameter 表示链码的验证参数。
	ValidationParameter []byte `protobuf:"bytes,5,opt,name=validation_parameter,json=validationParameter,proto3" json:"validation_parameter,omitempty"`
	// Collections 表示链码的集合配置包。
	Collections *ppeer.CollectionConfigPackage `protobuf:"bytes,6,opt,name=collections,proto3" json:"collections,omitempty"`
	// InitRequired 表示链码是否需要初始化。
	InitRequired bool `protobuf:"varint,7,opt,name=init_required,json=initRequired,proto3" json:"init_required,omitempty"`
	// Source 表示链码来源。
	Source *ChaincodeSource `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *QueryApprovedChaincodeDefinitionResult) Reset() {
	*x = QueryApprovedChaincodeDefinitionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryApprovedChaincodeDefinitionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryApprovedChaincodeDefinitionResult) ProtoMessage() {}

func (x *QueryApprovedChaincodeDefinitionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryApprovedChaincodeDefinitionResult.ProtoReflect.Descriptor instead.
func (*QueryApprovedChaincodeDefinitionResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{16}
}

func (x *QueryApprovedChaincodeDefinitionResult) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *QueryApprovedChaincodeDefinitionResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *QueryApprovedChaincodeDefinitionResult) GetEndorsementPlugin() string {
	if x != nil {
		return x.EndorsementPlugin
	}
	return ""
}

func (x *QueryApprovedChaincodeDefinitionResult) GetValidationPlugin() string {
	if x != nil {
		return x.ValidationPlugin
	}
	return ""
}

func (x *QueryApprovedChaincodeDefinitionResult) GetValidationParameter() []byte {
	if x != nil {
		return x.ValidationParameter
	}
	return nil
}

func (x *QueryApprovedChaincodeDefinitionResult) GetCollections() *ppeer.CollectionConfigPackage {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *QueryApprovedChaincodeDefinitionResult) GetInitRequired() bool {
	if x != nil {
		return x.InitRequired
	}
	return false
}

func (x *QueryApprovedChaincodeDefinitionResult) GetSource() *ChaincodeSource {
	if x != nil {
		return x.Source
	}
	return nil
}

// QueryChaincodeDefinitionArgs 该消息用作 _lifecycle.QueryChaincodeDefinition 方法的参数。
// 它包含了查询链码定义所需的信息，包括链码名称（name）。通过传递这些参数，可以查询特定链码定义信息。
type QueryChaincodeDefinitionArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *QueryChaincodeDefinitionArgs) Reset() {
	*x = QueryChaincodeDefinitionArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaincodeDefinitionArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaincodeDefinitionArgs) ProtoMessage() {}

func (x *QueryChaincodeDefinitionArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaincodeDefinitionArgs.ProtoReflect.Descriptor instead.
func (*QueryChaincodeDefinitionArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{17}
}

func (x *QueryChaincodeDefinitionArgs) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type QueryChaincodeDefinitionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence 表示链码定义的序列号。
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Version 表示链码的版本。
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// EndorsementPlugin 表示链码的背书插件。
	EndorsementPlugin string `protobuf:"bytes,3,opt,name=endorsement_plugin,json=endorsementPlugin,proto3" json:"endorsement_plugin,omitempty"`
	// ValidationPlugin 表示链码的验证插件。
	ValidationPlugin string `protobuf:"bytes,4,opt,name=validation_plugin,json=validationPlugin,proto3" json:"validation_plugin,omitempty"`
	// ValidationParameter 表示链码的验证参数。
	ValidationParameter []byte `protobuf:"bytes,5,opt,name=validation_parameter,json=validationParameter,proto3" json:"validation_parameter,omitempty"`
	// Collections 表示链码的集合配置包。
	Collections *ppeer.CollectionConfigPackage `protobuf:"bytes,6,opt,name=collections,proto3" json:"collections,omitempty"`
	// InitRequired 表示链码是否需要初始化。
	InitRequired bool `protobuf:"varint,7,opt,name=init_required,json=initRequired,proto3" json:"init_required,omitempty"`
	// Approvals 该映射（map），将组织（orgs）与对提供的定义（args）的批准（true/false）对应起来。
	// 通过查询该结果，可以判断各个组织是否已经批准了特定的链码定义。
	Approvals map[string]bool `protobuf:"bytes,8,rep,name=approvals,proto3" json:"approvals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *QueryChaincodeDefinitionResult) Reset() {
	*x = QueryChaincodeDefinitionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaincodeDefinitionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaincodeDefinitionResult) ProtoMessage() {}

func (x *QueryChaincodeDefinitionResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaincodeDefinitionResult.ProtoReflect.Descriptor instead.
func (*QueryChaincodeDefinitionResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{18}
}

func (x *QueryChaincodeDefinitionResult) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *QueryChaincodeDefinitionResult) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *QueryChaincodeDefinitionResult) GetEndorsementPlugin() string {
	if x != nil {
		return x.EndorsementPlugin
	}
	return ""
}

func (x *QueryChaincodeDefinitionResult) GetValidationPlugin() string {
	if x != nil {
		return x.ValidationPlugin
	}
	return ""
}

func (x *QueryChaincodeDefinitionResult) GetValidationParameter() []byte {
	if x != nil {
		return x.ValidationParameter
	}
	return nil
}

func (x *QueryChaincodeDefinitionResult) GetCollections() *ppeer.CollectionConfigPackage {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *QueryChaincodeDefinitionResult) GetInitRequired() bool {
	if x != nil {
		return x.InitRequired
	}
	return false
}

func (x *QueryChaincodeDefinitionResult) GetApprovals() map[string]bool {
	if x != nil {
		return x.Approvals
	}
	return nil
}

// QueryChaincodeDefinitionsArgs 该结构体用作 _lifecycle.QueryChaincodeDefinitions 方法的参数。
// 它为空消息，没有任何字段。通过传递该参数，可以查询所有已定义的链码的信息。
type QueryChaincodeDefinitionsArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QueryChaincodeDefinitionsArgs) Reset() {
	*x = QueryChaincodeDefinitionsArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaincodeDefinitionsArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaincodeDefinitionsArgs) ProtoMessage() {}

func (x *QueryChaincodeDefinitionsArgs) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaincodeDefinitionsArgs.ProtoReflect.Descriptor instead.
func (*QueryChaincodeDefinitionsArgs) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{19}
}

// QueryChaincodeDefinitionResult 该消息作为 _lifecycle.QueryChaincodeDefinitions 方法返回的结果消息。
type QueryChaincodeDefinitionsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChaincodeDefinitions []*QueryChaincodeDefinitionsResult_ChaincodeDefinition `protobuf:"bytes,1,rep,name=chaincode_definitions,json=chaincodeDefinitions,proto3" json:"chaincode_definitions,omitempty"`
}

func (x *QueryChaincodeDefinitionsResult) Reset() {
	*x = QueryChaincodeDefinitionsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaincodeDefinitionsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaincodeDefinitionsResult) ProtoMessage() {}

func (x *QueryChaincodeDefinitionsResult) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaincodeDefinitionsResult.ProtoReflect.Descriptor instead.
func (*QueryChaincodeDefinitionsResult) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{20}
}

func (x *QueryChaincodeDefinitionsResult) GetChaincodeDefinitions() []*QueryChaincodeDefinitionsResult_ChaincodeDefinition {
	if x != nil {
		return x.ChaincodeDefinitions
	}
	return nil
}

type QueryInstalledChaincodeResult_References struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chaincodes []*QueryInstalledChaincodeResult_Chaincode `protobuf:"bytes,1,rep,name=chaincodes,proto3" json:"chaincodes,omitempty"`
}

func (x *QueryInstalledChaincodeResult_References) Reset() {
	*x = QueryInstalledChaincodeResult_References{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstalledChaincodeResult_References) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstalledChaincodeResult_References) ProtoMessage() {}

func (x *QueryInstalledChaincodeResult_References) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstalledChaincodeResult_References.ProtoReflect.Descriptor instead.
func (*QueryInstalledChaincodeResult_References) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{3, 1}
}

func (x *QueryInstalledChaincodeResult_References) GetChaincodes() []*QueryInstalledChaincodeResult_Chaincode {
	if x != nil {
		return x.Chaincodes
	}
	return nil
}

type QueryInstalledChaincodeResult_Chaincode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name 链码的名称。
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version 链码的版本。
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *QueryInstalledChaincodeResult_Chaincode) Reset() {
	*x = QueryInstalledChaincodeResult_Chaincode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstalledChaincodeResult_Chaincode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstalledChaincodeResult_Chaincode) ProtoMessage() {}

func (x *QueryInstalledChaincodeResult_Chaincode) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstalledChaincodeResult_Chaincode.ProtoReflect.Descriptor instead.
func (*QueryInstalledChaincodeResult_Chaincode) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{3, 2}
}

func (x *QueryInstalledChaincodeResult_Chaincode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryInstalledChaincodeResult_Chaincode) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// InstalledChaincode 结构体包含了一个已安装链码的信息。它包含了 PackageId 字段，表示链码的安装包 ID，Label 字段
// 表示链码的标签。References 字段是一个 map，用于存储引用了该链码包的链码定义，其中 key 为通道名称，value 为
// References 结构体的实例。
type QueryInstalledChaincodesResult_InstalledChaincode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId  string                                                `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	Label      string                                                `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	References map[string]*QueryInstalledChaincodesResult_References `protobuf:"bytes,3,rep,name=references,proto3" json:"references,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *QueryInstalledChaincodesResult_InstalledChaincode) Reset() {
	*x = QueryInstalledChaincodesResult_InstalledChaincode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstalledChaincodesResult_InstalledChaincode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstalledChaincodesResult_InstalledChaincode) ProtoMessage() {}

func (x *QueryInstalledChaincodesResult_InstalledChaincode) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstalledChaincodesResult_InstalledChaincode.ProtoReflect.Descriptor instead.
func (*QueryInstalledChaincodesResult_InstalledChaincode) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{7, 0}
}

func (x *QueryInstalledChaincodesResult_InstalledChaincode) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *QueryInstalledChaincodesResult_InstalledChaincode) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *QueryInstalledChaincodesResult_InstalledChaincode) GetReferences() map[string]*QueryInstalledChaincodesResult_References {
	if x != nil {
		return x.References
	}
	return nil
}

// References 结构体包含一个字段 Chaincodes，表示引用了该链码包的链码定义列表。
type QueryInstalledChaincodesResult_References struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chaincodes []*QueryInstalledChaincodesResult_Chaincode `protobuf:"bytes,1,rep,name=chaincodes,proto3" json:"chaincodes,omitempty"`
}

func (x *QueryInstalledChaincodesResult_References) Reset() {
	*x = QueryInstalledChaincodesResult_References{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstalledChaincodesResult_References) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstalledChaincodesResult_References) ProtoMessage() {}

func (x *QueryInstalledChaincodesResult_References) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstalledChaincodesResult_References.ProtoReflect.Descriptor instead.
func (*QueryInstalledChaincodesResult_References) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{7, 1}
}

func (x *QueryInstalledChaincodesResult_References) GetChaincodes() []*QueryInstalledChaincodesResult_Chaincode {
	if x != nil {
		return x.Chaincodes
	}
	return nil
}

// Chaincode 结构体包含了一个引用链码的信息，包含 Name 字段表示链码名称，Version 字段表示链码版本。
type QueryInstalledChaincodesResult_Chaincode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *QueryInstalledChaincodesResult_Chaincode) Reset() {
	*x = QueryInstalledChaincodesResult_Chaincode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInstalledChaincodesResult_Chaincode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInstalledChaincodesResult_Chaincode) ProtoMessage() {}

func (x *QueryInstalledChaincodesResult_Chaincode) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInstalledChaincodesResult_Chaincode.ProtoReflect.Descriptor instead.
func (*QueryInstalledChaincodesResult_Chaincode) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{7, 2}
}

func (x *QueryInstalledChaincodesResult_Chaincode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryInstalledChaincodesResult_Chaincode) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Unavailable 表示链码的来源不可用。
type ChaincodeSource_Unavailable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChaincodeSource_Unavailable) Reset() {
	*x = ChaincodeSource_Unavailable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeSource_Unavailable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeSource_Unavailable) ProtoMessage() {}

func (x *ChaincodeSource_Unavailable) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeSource_Unavailable.ProtoReflect.Descriptor instead.
func (*ChaincodeSource_Unavailable) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{9, 0}
}

// Local 表示链码的来源是本地，需要提供链码包的 ID。
type ChaincodeSource_Local struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackageId string `protobuf:"bytes,1,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
}

func (x *ChaincodeSource_Local) Reset() {
	*x = ChaincodeSource_Local{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChaincodeSource_Local) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChaincodeSource_Local) ProtoMessage() {}

func (x *ChaincodeSource_Local) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChaincodeSource_Local.ProtoReflect.Descriptor instead.
func (*ChaincodeSource_Local) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{9, 1}
}

func (x *ChaincodeSource_Local) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

type QueryChaincodeDefinitionsResult_ChaincodeDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence 表示链码定义的序列号。
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Name 表示链码的名称。
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Version 表示链码的版本号。
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// EndorsementPlugin 表示链码的背书插件。
	EndorsementPlugin string `protobuf:"bytes,4,opt,name=endorsement_plugin,json=endorsementPlugin,proto3" json:"endorsement_plugin,omitempty"`
	// ValidationPlugin 表示链码的验证插件。
	ValidationPlugin string `protobuf:"bytes,5,opt,name=validation_plugin,json=validationPlugin,proto3" json:"validation_plugin,omitempty"`
	// ValidationParameter 表示链码的验证参数。
	ValidationParameter []byte `protobuf:"bytes,6,opt,name=validation_parameter,json=validationParameter,proto3" json:"validation_parameter,omitempty"`
	// Collections 表示链码的集合配置包。
	Collections *ppeer.CollectionConfigPackage `protobuf:"bytes,7,opt,name=collections,proto3" json:"collections,omitempty"`
	// InitRequired 表示链码是否需要初始化。
	InitRequired bool `protobuf:"varint,8,opt,name=init_required,json=initRequired,proto3" json:"init_required,omitempty"`
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) Reset() {
	*x = QueryChaincodeDefinitionsResult_ChaincodeDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lifecycle_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChaincodeDefinitionsResult_ChaincodeDefinition) ProtoMessage() {}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_lifecycle_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChaincodeDefinitionsResult_ChaincodeDefinition.ProtoReflect.Descriptor instead.
func (*QueryChaincodeDefinitionsResult_ChaincodeDefinition) Descriptor() ([]byte, []int) {
	return file_lifecycle_proto_rawDescGZIP(), []int{20, 0}
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) GetEndorsementPlugin() string {
	if x != nil {
		return x.EndorsementPlugin
	}
	return ""
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) GetValidationPlugin() string {
	if x != nil {
		return x.ValidationPlugin
	}
	return ""
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) GetValidationParameter() []byte {
	if x != nil {
		return x.ValidationParameter
	}
	return nil
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) GetCollections() *ppeer.CollectionConfigPackage {
	if x != nil {
		return x.Collections
	}
	return nil
}

func (x *QueryChaincodeDefinitionsResult_ChaincodeDefinition) GetInitRequired() bool {
	if x != nil {
		return x.InitRequired
	}
	return false
}

var File_lifecycle_proto protoreflect.FileDescriptor

var file_lifecycle_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x1a, 0x16, 0x70,
	0x70, 0x65, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x17, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x16, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3c, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xc2, 0x03, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x59, 0x0a,
	0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x73, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70,
	0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a,
	0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x1a, 0x39, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x60,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x22, 0x1e, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x72, 0x67, 0x73,
	0x22, 0xe2, 0x04, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x70, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0xae, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x6d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x1a, 0x74, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x0a, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x03, 0x0a, 0x26, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x4d, 0x79, 0x4f, 0x72, 0x67, 0x41, 0x72, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xe7, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x75, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x1a, 0x0d, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x1a,
	0x26, 0x0a, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x2a, 0x0a, 0x28, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x4d, 0x79, 0x4f, 0x72, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x1d,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x21, 0x0a,
	0x1f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xda, 0x02, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x70,
	0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xaf, 0x01,
	0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x09,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x56, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x26, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x1c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe3, 0x03, 0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x14,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x1a,
	0x3c, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a,
	0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x72, 0x67, 0x73, 0x22, 0xef,
	0x03, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x74, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xd5, 0x02, 0x0a, 0x13, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31,
	0x31, 0x30, 0x39, 0x30, 0x38, 0x31, 0x35, 0x2f, 0x6d, 0x61, 0x79, 0x79, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x70, 0x65, 0x65, 0x72, 0x2f, 0x70, 0x6c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lifecycle_proto_rawDescOnce sync.Once
	file_lifecycle_proto_rawDescData = file_lifecycle_proto_rawDesc
)

func file_lifecycle_proto_rawDescGZIP() []byte {
	file_lifecycle_proto_rawDescOnce.Do(func() {
		file_lifecycle_proto_rawDescData = protoimpl.X.CompressGZIP(file_lifecycle_proto_rawDescData)
	})
	return file_lifecycle_proto_rawDescData
}

var file_lifecycle_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_lifecycle_proto_goTypes = []interface{}{
	(*InstallChaincodeArgs)(nil),                              // 0: plifecycle.InstallChaincodeArgs
	(*InstallChaincodeResult)(nil),                            // 1: plifecycle.InstallChaincodeResult
	(*QueryInstalledChaincodeArgs)(nil),                       // 2: plifecycle.QueryInstalledChaincodeArgs
	(*QueryInstalledChaincodeResult)(nil),                     // 3: plifecycle.QueryInstalledChaincodeResult
	(*GetInstalledChaincodePackageArgs)(nil),                  // 4: plifecycle.GetInstalledChaincodePackageArgs
	(*GetInstalledChaincodePackageResult)(nil),                // 5: plifecycle.GetInstalledChaincodePackageResult
	(*QueryInstalledChaincodesArgs)(nil),                      // 6: plifecycle.QueryInstalledChaincodesArgs
	(*QueryInstalledChaincodesResult)(nil),                    // 7: plifecycle.QueryInstalledChaincodesResult
	(*ApproveChaincodeDefinitionForMyOrgArgs)(nil),            // 8: plifecycle.ApproveChaincodeDefinitionForMyOrgArgs
	(*ChaincodeSource)(nil),                                   // 9: plifecycle.ChaincodeSource
	(*ApproveChaincodeDefinitionForMyOrgResult)(nil),          // 10: plifecycle.ApproveChaincodeDefinitionForMyOrgResult
	(*CommitChaincodeDefinitionArgs)(nil),                     // 11: plifecycle.CommitChaincodeDefinitionArgs
	(*CommitChaincodeDefinitionResult)(nil),                   // 12: plifecycle.CommitChaincodeDefinitionResult
	(*CheckCommitReadinessArgs)(nil),                          // 13: plifecycle.CheckCommitReadinessArgs
	(*CheckCommitReadinessResult)(nil),                        // 14: plifecycle.CheckCommitReadinessResult
	(*QueryApprovedChaincodeDefinitionArgs)(nil),              // 15: plifecycle.QueryApprovedChaincodeDefinitionArgs
	(*QueryApprovedChaincodeDefinitionResult)(nil),            // 16: plifecycle.QueryApprovedChaincodeDefinitionResult
	(*QueryChaincodeDefinitionArgs)(nil),                      // 17: plifecycle.QueryChaincodeDefinitionArgs
	(*QueryChaincodeDefinitionResult)(nil),                    // 18: plifecycle.QueryChaincodeDefinitionResult
	(*QueryChaincodeDefinitionsArgs)(nil),                     // 19: plifecycle.QueryChaincodeDefinitionsArgs
	(*QueryChaincodeDefinitionsResult)(nil),                   // 20: plifecycle.QueryChaincodeDefinitionsResult
	nil,                                                       // 21: plifecycle.QueryInstalledChaincodeResult.ReferencesEntry
	(*QueryInstalledChaincodeResult_References)(nil),          // 22: plifecycle.QueryInstalledChaincodeResult.References
	(*QueryInstalledChaincodeResult_Chaincode)(nil),           // 23: plifecycle.QueryInstalledChaincodeResult.Chaincode
	(*QueryInstalledChaincodesResult_InstalledChaincode)(nil), // 24: plifecycle.QueryInstalledChaincodesResult.InstalledChaincode
	(*QueryInstalledChaincodesResult_References)(nil),         // 25: plifecycle.QueryInstalledChaincodesResult.References
	(*QueryInstalledChaincodesResult_Chaincode)(nil),          // 26: plifecycle.QueryInstalledChaincodesResult.Chaincode
	nil,                                 // 27: plifecycle.QueryInstalledChaincodesResult.InstalledChaincode.ReferencesEntry
	(*ChaincodeSource_Unavailable)(nil), // 28: plifecycle.ChaincodeSource.Unavailable
	(*ChaincodeSource_Local)(nil),       // 29: plifecycle.ChaincodeSource.Local
	nil,                                 // 30: plifecycle.CheckCommitReadinessResult.ApprovalsEntry
	nil,                                 // 31: plifecycle.QueryChaincodeDefinitionResult.ApprovalsEntry
	(*QueryChaincodeDefinitionsResult_ChaincodeDefinition)(nil), // 32: plifecycle.QueryChaincodeDefinitionsResult.ChaincodeDefinition
	(*ppeer.CollectionConfigPackage)(nil),                       // 33: ppeer.CollectionConfigPackage
}
var file_lifecycle_proto_depIdxs = []int32{
	21, // 0: plifecycle.QueryInstalledChaincodeResult.references:type_name -> plifecycle.QueryInstalledChaincodeResult.ReferencesEntry
	24, // 1: plifecycle.QueryInstalledChaincodesResult.installed_chaincodes:type_name -> plifecycle.QueryInstalledChaincodesResult.InstalledChaincode
	33, // 2: plifecycle.ApproveChaincodeDefinitionForMyOrgArgs.collections:type_name -> ppeer.CollectionConfigPackage
	9,  // 3: plifecycle.ApproveChaincodeDefinitionForMyOrgArgs.source:type_name -> plifecycle.ChaincodeSource
	28, // 4: plifecycle.ChaincodeSource.unavailable:type_name -> plifecycle.ChaincodeSource.Unavailable
	29, // 5: plifecycle.ChaincodeSource.local_package:type_name -> plifecycle.ChaincodeSource.Local
	33, // 6: plifecycle.CommitChaincodeDefinitionArgs.collections:type_name -> ppeer.CollectionConfigPackage
	33, // 7: plifecycle.CheckCommitReadinessArgs.collections:type_name -> ppeer.CollectionConfigPackage
	30, // 8: plifecycle.CheckCommitReadinessResult.approvals:type_name -> plifecycle.CheckCommitReadinessResult.ApprovalsEntry
	33, // 9: plifecycle.QueryApprovedChaincodeDefinitionResult.collections:type_name -> ppeer.CollectionConfigPackage
	9,  // 10: plifecycle.QueryApprovedChaincodeDefinitionResult.source:type_name -> plifecycle.ChaincodeSource
	33, // 11: plifecycle.QueryChaincodeDefinitionResult.collections:type_name -> ppeer.CollectionConfigPackage
	31, // 12: plifecycle.QueryChaincodeDefinitionResult.approvals:type_name -> plifecycle.QueryChaincodeDefinitionResult.ApprovalsEntry
	32, // 13: plifecycle.QueryChaincodeDefinitionsResult.chaincode_definitions:type_name -> plifecycle.QueryChaincodeDefinitionsResult.ChaincodeDefinition
	22, // 14: plifecycle.QueryInstalledChaincodeResult.ReferencesEntry.value:type_name -> plifecycle.QueryInstalledChaincodeResult.References
	23, // 15: plifecycle.QueryInstalledChaincodeResult.References.chaincodes:type_name -> plifecycle.QueryInstalledChaincodeResult.Chaincode
	27, // 16: plifecycle.QueryInstalledChaincodesResult.InstalledChaincode.references:type_name -> plifecycle.QueryInstalledChaincodesResult.InstalledChaincode.ReferencesEntry
	26, // 17: plifecycle.QueryInstalledChaincodesResult.References.chaincodes:type_name -> plifecycle.QueryInstalledChaincodesResult.Chaincode
	25, // 18: plifecycle.QueryInstalledChaincodesResult.InstalledChaincode.ReferencesEntry.value:type_name -> plifecycle.QueryInstalledChaincodesResult.References
	33, // 19: plifecycle.QueryChaincodeDefinitionsResult.ChaincodeDefinition.collections:type_name -> ppeer.CollectionConfigPackage
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_lifecycle_proto_init() }
func file_lifecycle_proto_init() {
	if File_lifecycle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lifecycle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallChaincodeArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallChaincodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstalledChaincodeArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstalledChaincodeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstalledChaincodePackageArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInstalledChaincodePackageResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstalledChaincodesArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstalledChaincodesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveChaincodeDefinitionForMyOrgArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveChaincodeDefinitionForMyOrgResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitChaincodeDefinitionArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitChaincodeDefinitionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitReadinessArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCommitReadinessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryApprovedChaincodeDefinitionArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryApprovedChaincodeDefinitionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaincodeDefinitionArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaincodeDefinitionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaincodeDefinitionsArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaincodeDefinitionsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstalledChaincodeResult_References); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstalledChaincodeResult_Chaincode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstalledChaincodesResult_InstalledChaincode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstalledChaincodesResult_References); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInstalledChaincodesResult_Chaincode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeSource_Unavailable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChaincodeSource_Local); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lifecycle_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChaincodeDefinitionsResult_ChaincodeDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_lifecycle_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ChaincodeSource_Unavailable_)(nil),
		(*ChaincodeSource_LocalPackage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lifecycle_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lifecycle_proto_goTypes,
		DependencyIndexes: file_lifecycle_proto_depIdxs,
		MessageInfos:      file_lifecycle_proto_msgTypes,
	}.Build()
	File_lifecycle_proto = out.File
	file_lifecycle_proto_rawDesc = nil
	file_lifecycle_proto_goTypes = nil
	file_lifecycle_proto_depIdxs = nil
}
