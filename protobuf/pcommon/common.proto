syntax = "proto3";

option go_package = "github.com/11090815/mayy/protobuf/pcommon";

package pcommon;

import "github.com/google/protobuf/timestamp.proto";

// Status 类似于 HTTP 请求的状态码。
enum Status {
    UNKNOWN                  = 0;
    SUCCESS                  = 200;
    BAD_REQUEST              = 400;
    FORBIDDEN                = 403;
    NOT_FOUND                = 404;
    REQUEST_ENTITY_TOO_LARGE = 413;
    INTERNAL_SERVER_ERROR    = 500;
    NOT_IMPLEMENTED          = 501;
    SERVICE_UNAVAILABLE      = 503;
}

// HeaderType 表示头部消息类型。
enum HeaderType {
    MESSAGE              = 0; // MESSAGE 表示消息类型为一种已签名但不透明的消息。
    CONFIG               = 1; // CONFIG 表示消息类型为通道配置。
    CONFIG_UPDATE        = 2; // CONFIG 表示消息类型为更新通道配置的事务。
    ENDORSER_TRANSACTION = 3; // ENDORSER_TRANSACTION 表示消息类型用于 SDK 提交基于背书节点的事务。
    ORDERER_TRANSACTION  = 4; // ORDERER_TRANSACTION 表示消息类型用于内部使用，由排序服务进行管理。
    DELIVER_SEEK_INFO    = 5; // DELIVER_SEEK_INFO 表示消息类型用作提交给 Deliver API 以请求消息定位的 Envelope 消息类型。
    CHAINCODE_PACKAGE    = 6; // CHAINCODE_PACKAGE 表示消息类型用于打包链码构件以进行安装。
}

// BlockMetadataIndex 用于列举区块元数据数组的索引位置。
enum BlockMetadataIndex {
    SIGNATURES          = 0; // SIGNATURES 区块签名在区块元数据数组中的位置。
    TRANSACTIONS_FILTER = 1; // TRANSACTIONS_FILTER 存储无效交易的序列化位数组过滤器在区块元数据数组中的位置。
    COMMIT_HASH         = 2; //  COMMIT_HASH 存储 TRANSACTIONS_FILTER、状态更新以及上一个区块的 COMMIT_HASH 的散列值在区块元数据数组中的位置。
}

// LastConfig 用于编码在 LastConfig 区块元数据索引中的 Metadata 消息的编码值。
message LastConfig {
    uint64 index = 1; // Index 表示上一个配置块的序列号。
}

// Meatadata 是一个常用结构，用于存储元数据的签名信息。
message Metadata {
    bytes value                             = 1; // Value 是一个字节数组，用于存储编码后的元数据值。
    repeated MetadataSignature signatures   = 2; // Signatures 是一个重复的 MetadataSignature 消息数组，用于存储元数据的签名信息。
}

// MetadataSignature 是一个消息结构体，用于存储元数据的签名信息。
message MetadataSignature {
    bytes signature_header  = 1; // SignatureHeader 是一个字节数组，用于存储编码后的签名头。
    bytes signature         = 2; // Signature 是一个字节数组，用于存储签名信息。
    bytes identifier_header = 3; // IdentifierHeader 是一个字节数组，如果 SignatureHeader 为空，则用此字段来标识创建者的 ID。
}

// IdentifierHeader 当创建者可以通过 ID 索引时，IdentifierHeader 可被用作 SignatureHeader 的替代。
message IdentifierHeader {
    uint32 identifier   = 1; // Identifier 是一个 32 位无符号整数，表示消息创建者的唯一标识符。
    bytes nonce         = 2; // Nonce 是一个字节数组，它是一个只能使用一次的任意数值，用于防重放攻击。
}

// Header 用于存储签名有效载荷中的通用信息。
message Header {
    bytes channel_header    = 1; // ChannelHeader 是一个字节数组，存储通道头的编码值。
    bytes signature_header  = 2; // SignatureHeader 是一个字节数组，存储签名头的编码值。
}

// ChannelHeader 用于存储通道头部的通用信息。
message ChannelHeader {
    int32 type                          = 1; // Type 用于定义头的类型，其中 0-10000 被保留。
    int32 version                       = 2; // Version 表示消息协议版本。
    google.protobuf.Timestamp timestamp = 3; // Timestamp 表示创建消息时的时间。
    string channel_id                   = 4; // ChannelId 表示消息所属的通道的标识符。
    string tx_id                        = 5; // TxId 表示该消息绑定的唯一标识符，用于实现端到端的唯一性。
    uint64 epoch                        = 6; // Epoch 表示生成该头部的时期，由区块高度定义，只有当对等方所处的时期与该时期相同，且此消息在本时期内被对等方第一次收到，对等方才会接受该消息。
    bytes extension                     = 7; // Extension 是一个字节数组，用于根据消息头类型附加扩展信息。
    bytes tls_cert_hash                 = 8; // TlsCertHash 是一个字节数组，如果使用了双向 TLS，则代表客户端 TLS，则代表客户端 TLS 整数的散列值。
}

// SignatureHeader 签名头。
message SignatureHeader {
    bytes creator   = 1; // Creator 节点的 x509 证书的 PEM 编码格式的字节数组。
    bytes nonce     = 2; // Nonce 用于检测重放攻击的随机值。
}

// Payload 消息内容。
message Payload {
    Header header   = 1; // Header 内包含了身份信息，可用于身份验证，并且用于防重放。
    bytes data      = 2; // Data 消息的内容。
}

message Envelope {
    bytes payload   = 1; // Payload 是 Payload 结构体序列化后的编码数据。
    bytes signature = 2; // Signature 由创建者在 Payload.Header 中指定的签名。
}

// Block 是最终的区块结构，包含了区块头、区块体和区块元数据，区块头用于形成区块链，
// 包含了区块在区块链中的位置、前一个区块的哈希和区块体的哈希，区块提包含了一系列交
// 易数据，区块元数据中包含了一系列的元数据。
message Block {
    BlockHeader header      = 1; // Header 区块头。
    BlockData data          = 2; // Data 区块体。
    BlockMetadata metadata  = 3; // Metadata 区块元数据。
}

// BlockHeader 区块头是构成区块链的元素，它使用配置的哈希算法对区块头的 ASN.1 编码进行哈希。
message BlockHeader {
    uint64 number       = 1; // Number 表示区块在区块链中的位置，使用无符号 64 位整数表示。
    bytes previous_hash = 2; // PreviousHash 表示前一个区块的哈希值。
    bytes data_hash     = 3; // DataHash 交易按照默克尔树结构组织起来，树的根节点的哈希值即是 DataHash。
}

// BlockData 是区块中的数据部分。
message BlockData {
    repeated bytes data = 1; // Data 内存储了区块中的所有交易数据。
}

// BlockMetadata 是区块的元数据部分。
message BlockMetadata {
    repeated bytes metadata = 1; // Metadata 内存储了区块的所有元数据。
}

// OrdererBlockMetadata 定义了排序服务的元数据。
message OrdererBlockMetadata {
    LastConfig last_config      = 1; // LastConfig 用于记录最近一次的配置更新。
    bytes consenter_metadata    = 2; // ConsenterMetadata 共识节点的元数据，可以包含共识节点的特定信息。
}

// HashingAlgorithm 用于表示配置哈希算法的配置消息，当前只支持 SHA256。
message HashingAlgorithm {
    // Name 目前支持的哈希函数名是 SHA256。
    string name = 1;
}

// BlockDataHashingStructure 用于表示区块数据哈希结构的消息，它包含一个字段 width，用于
// 指定计算区块哈希时所使用的 merkle 树的宽度。
message BlockDataHashingStructure {
    // Width 用于指定 merkle 树的宽度。
    uint32 width = 1;
}

// OrdererAddresses 用于表示排序节点的地址消息，其内的 Addresses 字段用于存储多个排序节
// 点的地址。
message OrdererAddresses {
    repeated string addresses = 1;
}

// Consenter 用于表示共识节点的消息，其内包含了共识节点的标识符和证书等字段。
message Consenter {
    uint32 id             = 1;
    string host           = 2;
    uint32 port           = 3;
    string msp_id         = 4;
    bytes identity        = 5;

    // ClientTlsCert 字段表示共识节点作为客户端时所使用的 TLS 证书，该证书用于向其他共识
    // 节点验证自身的身份，用于加密和解密通信内容。
    bytes client_tls_cert = 6;

    // ServerTlsCert 字段表示共识节点作为服务器端时所使用的 TLS 证书，该证书用于接收其他
    // 共识节点的连接，用于加密和解密通信内容。
    bytes server_tls_cert = 7;
}

// Orderers 用于表示排序节点的消息，它包含一个 ConsenterMapping 字段，用于存储多个共识节
// 点的映射关系，映射关系是 Consenter Id => Consenter。
message Orderers {
    map<string,Consenter> consenter_mapping = 1;
}

// Consortium 用于表示通道创建时的联盟上下文的消息，其内的 Name 字段用于存储联盟的名字。
message Consortium {
    string name = 1;
}

// Capabilities 用于定义参与通道的各个二进制文件必须实现的能力（capabilities）。该消息在
// 不同层级上定义，包括 /Channel 层级、/Channel/Application 层级和/Channel/Orderer 层
// 级。每个层级的能力都有不同的影响范围和要求。该消息通过一个 Capabilities 字段，使用 map
// 类型来存储不同能力的名称和对应的能力定义（Capability）。
message Capabilities {
    // Capabilities 消息的作用是定义了一系列的能力要求，用于确保网络中的所有节点和组件都满
    // 足这些规定的能力要求。这些能力通常对应于发布的二进制版本（例如，“V1.1”），并且主要用
    // 作完全升级的网络从一组逻辑切换到另一组逻辑的机制。
    map<string,Capability> capabilities = 1;
}

// Capability 目前是一个空消息。它被定义为一个 protobuf 消息，而不是一个常量，因此如果将来
// 有需要，我们可以扩展其他字段的功能。
message Capability {}

// protoc --proto_path=. --proto_path=$GOPATH/src/ --go_out=,paths=source_relative:. common.proto
