// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: blockattestation.proto

package porderer

import (
	context "context"
	pcommon "github.com/11090815/mayy/protobuf/pcommon"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlockAttestation 结构体包含了两个字段 Header 和 Metadata，用于表示区块的证明信息。
type BlockAttestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Header 表示区块的头部信息，包括区块的版本、哈希值和时间戳等。
	Header *pcommon.BlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Metadata 表示区块的元数据信息，例如区块的交易数量、交易元数据等。
	Metadata *pcommon.BlockMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BlockAttestation) Reset() {
	*x = BlockAttestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockattestation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAttestation) ProtoMessage() {}

func (x *BlockAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_blockattestation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAttestation.ProtoReflect.Descriptor instead.
func (*BlockAttestation) Descriptor() ([]byte, []int) {
	return file_blockattestation_proto_rawDescGZIP(), []int{0}
}

func (x *BlockAttestation) GetHeader() *pcommon.BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BlockAttestation) GetMetadata() *pcommon.BlockMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// BlockAttestationResponse 结构体表示对区块证明的响应。
type BlockAttestationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*BlockAttestationResponse_Status
	//	*BlockAttestationResponse_BlockAttestation
	Type isBlockAttestationResponse_Type `protobuf_oneof:"Type"`
}

func (x *BlockAttestationResponse) Reset() {
	*x = BlockAttestationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_blockattestation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockAttestationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAttestationResponse) ProtoMessage() {}

func (x *BlockAttestationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_blockattestation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAttestationResponse.ProtoReflect.Descriptor instead.
func (*BlockAttestationResponse) Descriptor() ([]byte, []int) {
	return file_blockattestation_proto_rawDescGZIP(), []int{1}
}

func (m *BlockAttestationResponse) GetType() isBlockAttestationResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *BlockAttestationResponse) GetStatus() pcommon.Status {
	if x, ok := x.GetType().(*BlockAttestationResponse_Status); ok {
		return x.Status
	}
	return pcommon.Status_UNKNOWN
}

func (x *BlockAttestationResponse) GetBlockAttestation() *BlockAttestation {
	if x, ok := x.GetType().(*BlockAttestationResponse_BlockAttestation); ok {
		return x.BlockAttestation
	}
	return nil
}

type isBlockAttestationResponse_Type interface {
	isBlockAttestationResponse_Type()
}

type BlockAttestationResponse_Status struct {
	// Status 表示区块证明的响应状态。
	Status pcommon.Status `protobuf:"varint,1,opt,name=status,proto3,enum=pcommon.Status,oneof"`
}

type BlockAttestationResponse_BlockAttestation struct {
	// BlockAttestation 表示区块的证明信息。
	BlockAttestation *BlockAttestation `protobuf:"bytes,2,opt,name=block_attestation,json=blockAttestation,proto3,oneof"`
}

func (*BlockAttestationResponse_Status) isBlockAttestationResponse_Type() {}

func (*BlockAttestationResponse_BlockAttestation) isBlockAttestationResponse_Type() {}

var File_blockattestation_proto protoreflect.FileDescriptor

var file_blockattestation_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x1a, 0x14, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x10, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98,
	0x01, 0x0a, 0x18, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x32, 0x61, 0x0a, 0x11, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c,
	0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
	0x72, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x2c, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39, 0x30,
	0x38, 0x31, 0x35, 0x2f, 0x6d, 0x61, 0x79, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_blockattestation_proto_rawDescOnce sync.Once
	file_blockattestation_proto_rawDescData = file_blockattestation_proto_rawDesc
)

func file_blockattestation_proto_rawDescGZIP() []byte {
	file_blockattestation_proto_rawDescOnce.Do(func() {
		file_blockattestation_proto_rawDescData = protoimpl.X.CompressGZIP(file_blockattestation_proto_rawDescData)
	})
	return file_blockattestation_proto_rawDescData
}

var file_blockattestation_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_blockattestation_proto_goTypes = []interface{}{
	(*BlockAttestation)(nil),         // 0: porderer.BlockAttestation
	(*BlockAttestationResponse)(nil), // 1: porderer.BlockAttestationResponse
	(*pcommon.BlockHeader)(nil),      // 2: pcommon.BlockHeader
	(*pcommon.BlockMetadata)(nil),    // 3: pcommon.BlockMetadata
	(pcommon.Status)(0),              // 4: pcommon.Status
	(*pcommon.Envelope)(nil),         // 5: pcommon.Envelope
}
var file_blockattestation_proto_depIdxs = []int32{
	2, // 0: porderer.BlockAttestation.header:type_name -> pcommon.BlockHeader
	3, // 1: porderer.BlockAttestation.metadata:type_name -> pcommon.BlockMetadata
	4, // 2: porderer.BlockAttestationResponse.status:type_name -> pcommon.Status
	0, // 3: porderer.BlockAttestationResponse.block_attestation:type_name -> porderer.BlockAttestation
	5, // 4: porderer.BlockAttestations.BlockAttestations:input_type -> pcommon.Envelope
	1, // 5: porderer.BlockAttestations.BlockAttestations:output_type -> porderer.BlockAttestationResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_blockattestation_proto_init() }
func file_blockattestation_proto_init() {
	if File_blockattestation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_blockattestation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockAttestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_blockattestation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockAttestationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_blockattestation_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BlockAttestationResponse_Status)(nil),
		(*BlockAttestationResponse_BlockAttestation)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_blockattestation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_blockattestation_proto_goTypes,
		DependencyIndexes: file_blockattestation_proto_depIdxs,
		MessageInfos:      file_blockattestation_proto_msgTypes,
	}.Build()
	File_blockattestation_proto = out.File
	file_blockattestation_proto_rawDesc = nil
	file_blockattestation_proto_goTypes = nil
	file_blockattestation_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlockAttestationsClient is the client API for BlockAttestations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockAttestationsClient interface {
	// BlockAttestations
	//
	//  1. 区块认证：当节点（peer）收到一个区块的认证请求时，它会调用该 gRPC 服务来处理请求。
	//     区块认证是指对一个新收到的区块进行验证和认证，以确保该区块的有效性和一致性。
	//
	//  2. 传递区块认证结果：该服务返回一个流的区块认证响应，可以提供实时的认证结果信息。这对
	//     于其他节点或组件来说非常有用，因为它们可以及时了解到区块认证的进展和结果，以便进行后续操作。
	BlockAttestations(ctx context.Context, in *pcommon.Envelope, opts ...grpc.CallOption) (BlockAttestations_BlockAttestationsClient, error)
}

type blockAttestationsClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockAttestationsClient(cc grpc.ClientConnInterface) BlockAttestationsClient {
	return &blockAttestationsClient{cc}
}

func (c *blockAttestationsClient) BlockAttestations(ctx context.Context, in *pcommon.Envelope, opts ...grpc.CallOption) (BlockAttestations_BlockAttestationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlockAttestations_serviceDesc.Streams[0], "/porderer.BlockAttestations/BlockAttestations", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAttestationsBlockAttestationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockAttestations_BlockAttestationsClient interface {
	Recv() (*BlockAttestationResponse, error)
	grpc.ClientStream
}

type blockAttestationsBlockAttestationsClient struct {
	grpc.ClientStream
}

func (x *blockAttestationsBlockAttestationsClient) Recv() (*BlockAttestationResponse, error) {
	m := new(BlockAttestationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockAttestationsServer is the server API for BlockAttestations service.
type BlockAttestationsServer interface {
	// BlockAttestations
	//
	//  1. 区块认证：当节点（peer）收到一个区块的认证请求时，它会调用该 gRPC 服务来处理请求。
	//     区块认证是指对一个新收到的区块进行验证和认证，以确保该区块的有效性和一致性。
	//
	//  2. 传递区块认证结果：该服务返回一个流的区块认证响应，可以提供实时的认证结果信息。这对
	//     于其他节点或组件来说非常有用，因为它们可以及时了解到区块认证的进展和结果，以便进行后续操作。
	BlockAttestations(*pcommon.Envelope, BlockAttestations_BlockAttestationsServer) error
}

// UnimplementedBlockAttestationsServer can be embedded to have forward compatible implementations.
type UnimplementedBlockAttestationsServer struct {
}

func (*UnimplementedBlockAttestationsServer) BlockAttestations(*pcommon.Envelope, BlockAttestations_BlockAttestationsServer) error {
	return status.Errorf(codes.Unimplemented, "method BlockAttestations not implemented")
}

func RegisterBlockAttestationsServer(s *grpc.Server, srv BlockAttestationsServer) {
	s.RegisterService(&_BlockAttestations_serviceDesc, srv)
}

func _BlockAttestations_BlockAttestations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(pcommon.Envelope)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockAttestationsServer).BlockAttestations(m, &blockAttestationsBlockAttestationsServer{stream})
}

type BlockAttestations_BlockAttestationsServer interface {
	Send(*BlockAttestationResponse) error
	grpc.ServerStream
}

type blockAttestationsBlockAttestationsServer struct {
	grpc.ServerStream
}

func (x *blockAttestationsBlockAttestationsServer) Send(m *BlockAttestationResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _BlockAttestations_serviceDesc = grpc.ServiceDesc{
	ServiceName: "porderer.BlockAttestations",
	HandlerType: (*BlockAttestationsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BlockAttestations",
			Handler:       _BlockAttestations_BlockAttestations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "blockattestation.proto",
}
