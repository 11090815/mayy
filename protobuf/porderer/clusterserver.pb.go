// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: clusterserver.proto

package porderer

import (
	context "context"
	pcommon "github.com/11090815/mayy/protobuf/pcommon"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClusterNodeServiceStepRequest 用于封装发送给 cluster 成员的请求，其中的 Payload 字段，
// 定义了三种可能的消息：NodeConsensusRequest、NodeTransactionOrderRequest、NodeAuthRequest。
type ClusterNodeServiceStepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*ClusterNodeServiceStepRequest_NodeConsensusReq
	//	*ClusterNodeServiceStepRequest_NodeTransactionReq
	//	*ClusterNodeServiceStepRequest_NodeAuthReq
	Payload isClusterNodeServiceStepRequest_Payload `protobuf_oneof:"payload"`
}

func (x *ClusterNodeServiceStepRequest) Reset() {
	*x = ClusterNodeServiceStepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNodeServiceStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeServiceStepRequest) ProtoMessage() {}

func (x *ClusterNodeServiceStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clusterserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeServiceStepRequest.ProtoReflect.Descriptor instead.
func (*ClusterNodeServiceStepRequest) Descriptor() ([]byte, []int) {
	return file_clusterserver_proto_rawDescGZIP(), []int{0}
}

func (m *ClusterNodeServiceStepRequest) GetPayload() isClusterNodeServiceStepRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ClusterNodeServiceStepRequest) GetNodeConsensusReq() *NodeConsensusRequest {
	if x, ok := x.GetPayload().(*ClusterNodeServiceStepRequest_NodeConsensusReq); ok {
		return x.NodeConsensusReq
	}
	return nil
}

func (x *ClusterNodeServiceStepRequest) GetNodeTransactionReq() *NodeTransactionOrderRequest {
	if x, ok := x.GetPayload().(*ClusterNodeServiceStepRequest_NodeTransactionReq); ok {
		return x.NodeTransactionReq
	}
	return nil
}

func (x *ClusterNodeServiceStepRequest) GetNodeAuthReq() *NodeAuthRequest {
	if x, ok := x.GetPayload().(*ClusterNodeServiceStepRequest_NodeAuthReq); ok {
		return x.NodeAuthReq
	}
	return nil
}

type isClusterNodeServiceStepRequest_Payload interface {
	isClusterNodeServiceStepRequest_Payload()
}

type ClusterNodeServiceStepRequest_NodeConsensusReq struct {
	// NodeConsensusReq 用于在 cluster 成员之间发送共识请求。
	NodeConsensusReq *NodeConsensusRequest `protobuf:"bytes,1,opt,name=node_consensus_req,json=nodeConsensusReq,proto3,oneof"`
}

type ClusterNodeServiceStepRequest_NodeTransactionReq struct {
	// NodeTransactionOrderReq 用于传递交易的消息。
	NodeTransactionReq *NodeTransactionOrderRequest `protobuf:"bytes,2,opt,name=node_transaction_req,json=nodeTransactionReq,proto3,oneof"`
}

type ClusterNodeServiceStepRequest_NodeAuthReq struct {
	// NodeAuthReq 用于对发起 stream 流的成员进行身份验证的请求。
	NodeAuthReq *NodeAuthRequest `protobuf:"bytes,3,opt,name=node_auth_req,json=nodeAuthReq,proto3,oneof"`
}

func (*ClusterNodeServiceStepRequest_NodeConsensusReq) isClusterNodeServiceStepRequest_Payload() {}

func (*ClusterNodeServiceStepRequest_NodeTransactionReq) isClusterNodeServiceStepRequest_Payload() {}

func (*ClusterNodeServiceStepRequest_NodeAuthReq) isClusterNodeServiceStepRequest_Payload() {}

// ClusterNodeServiceStepResponse 这个消息结构体用于接收来自 cluster 成员的响应，其中的 Payload 字段
// 只定义了一种可能的消息：TransactionOrderResponse。
type ClusterNodeServiceStepResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*ClusterNodeServiceStepResponse_TransactionOrderRes
	Payload isClusterNodeServiceStepResponse_Payload `protobuf_oneof:"payload"`
}

func (x *ClusterNodeServiceStepResponse) Reset() {
	*x = ClusterNodeServiceStepResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNodeServiceStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNodeServiceStepResponse) ProtoMessage() {}

func (x *ClusterNodeServiceStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clusterserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNodeServiceStepResponse.ProtoReflect.Descriptor instead.
func (*ClusterNodeServiceStepResponse) Descriptor() ([]byte, []int) {
	return file_clusterserver_proto_rawDescGZIP(), []int{1}
}

func (m *ClusterNodeServiceStepResponse) GetPayload() isClusterNodeServiceStepResponse_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ClusterNodeServiceStepResponse) GetTransactionOrderRes() *TransactionOrderResponse {
	if x, ok := x.GetPayload().(*ClusterNodeServiceStepResponse_TransactionOrderRes); ok {
		return x.TransactionOrderRes
	}
	return nil
}

type isClusterNodeServiceStepResponse_Payload interface {
	isClusterNodeServiceStepResponse_Payload()
}

type ClusterNodeServiceStepResponse_TransactionOrderRes struct {
	// TransactionOrderRes 处理交易的响应消息。
	TransactionOrderRes *TransactionOrderResponse `protobuf:"bytes,1,opt,name=transaction_order_res,json=transactionOrderRes,proto3,oneof"`
}

func (*ClusterNodeServiceStepResponse_TransactionOrderRes) isClusterNodeServiceStepResponse_Payload() {
}

// NodeConsensusRequest 这是一个特定于共识的消息，用于发送给 cluster 成员。
type NodeConsensusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Payload 用于传输共识消息的具体内容。
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// Metadata 用于传输与共识相关的元数据。
	Metadata []byte `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *NodeConsensusRequest) Reset() {
	*x = NodeConsensusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConsensusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConsensusRequest) ProtoMessage() {}

func (x *NodeConsensusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clusterserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConsensusRequest.ProtoReflect.Descriptor instead.
func (*NodeConsensusRequest) Descriptor() ([]byte, []int) {
	return file_clusterserver_proto_rawDescGZIP(), []int{2}
}

func (x *NodeConsensusRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *NodeConsensusRequest) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// NodeTransactionOrderRequest 用于包装需要进行排序的交易。
type NodeTransactionOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LastValidationSeq 表示发送者验证此消息的最后配置序列。
	LastValidationSeq uint64 `protobuf:"varint,1,opt,name=last_validation_seq,json=lastValidationSeq,proto3" json:"last_validation_seq,omitempty"`
	// Payload 包含要转发给 cluster 成员的交易。
	Payload *pcommon.Envelope `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *NodeTransactionOrderRequest) Reset() {
	*x = NodeTransactionOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeTransactionOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeTransactionOrderRequest) ProtoMessage() {}

func (x *NodeTransactionOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clusterserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeTransactionOrderRequest.ProtoReflect.Descriptor instead.
func (*NodeTransactionOrderRequest) Descriptor() ([]byte, []int) {
	return file_clusterserver_proto_rawDescGZIP(), []int{3}
}

func (x *NodeTransactionOrderRequest) GetLastValidationSeq() uint64 {
	if x != nil {
		return x.LastValidationSeq
	}
	return 0
}

func (x *NodeTransactionOrderRequest) GetPayload() *pcommon.Envelope {
	if x != nil {
		return x.Payload
	}
	return nil
}

// TransactionOrderResponse 用于向交易发送方反馈交易处理结果的信息。
type TransactionOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Channel 表示交易所属的通道。
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// TxId 交易的 ID。
	TxId string `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// Status 交易处理结果的状态码。
	Status pcommon.Status `protobuf:"varint,3,opt,name=status,proto3,enum=pcommon.Status" json:"status,omitempty"`
	// Info 包含有关交易处理结果的附加信息。
	Info string `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *TransactionOrderResponse) Reset() {
	*x = TransactionOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionOrderResponse) ProtoMessage() {}

func (x *TransactionOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clusterserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionOrderResponse.ProtoReflect.Descriptor instead.
func (*TransactionOrderResponse) Descriptor() ([]byte, []int) {
	return file_clusterserver_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionOrderResponse) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *TransactionOrderResponse) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *TransactionOrderResponse) GetStatus() pcommon.Status {
	if x != nil {
		return x.Status
	}
	return pcommon.Status_UNKNOWN
}

func (x *TransactionOrderResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// NodeAuthRequest 用于在 cluster 成员之间验证 stream 流。
type NodeAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version 表示计算签名的字段版本。
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Signature 可以使用发起者的公钥进行验证的签名。
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Timestamp 指示请求的新鲜度，预期在响应者的本地时间范围。
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// FromId 表示连接发起者的数值标识符。
	FromId uint64 `protobuf:"varint,4,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	// ToId 表示正在连接的节点的数值标识符。
	ToId uint64 `protobuf:"varint,5,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
	// SessionBinding 可以使用应用级协议进行验证的会话绑定。
	SessionBinding []byte `protobuf:"bytes,6,opt,name=session_binding,json=sessionBinding,proto3" json:"session_binding,omitempty"`
	// Channel 表示连接所属的通道。
	Channel string `protobuf:"bytes,7,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *NodeAuthRequest) Reset() {
	*x = NodeAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clusterserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAuthRequest) ProtoMessage() {}

func (x *NodeAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clusterserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAuthRequest.ProtoReflect.Descriptor instead.
func (*NodeAuthRequest) Descriptor() ([]byte, []int) {
	return file_clusterserver_proto_rawDescGZIP(), []int{5}
}

func (x *NodeAuthRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NodeAuthRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *NodeAuthRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NodeAuthRequest) GetFromId() uint64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *NodeAuthRequest) GetToId() uint64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *NodeAuthRequest) GetSessionBinding() []byte {
	if x != nil {
		return x.SessionBinding
	}
	return nil
}

func (x *NodeAuthRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

var File_clusterserver_proto protoreflect.FileDescriptor

var file_clusterserver_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x1a,
	0x14, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x96, 0x02, 0x0a, 0x1d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x12, 0x59, 0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x3f,
	0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x7a, 0x0a, 0x1b, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x12,
	0x2b, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x86, 0x01, 0x0a,
	0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x32, 0x73, 0x0a, 0x12,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x27, 0x2e, 0x70, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x31, 0x31, 0x30, 0x39, 0x30, 0x38, 0x31, 0x35, 0x2f, 0x6d, 0x61, 0x79, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clusterserver_proto_rawDescOnce sync.Once
	file_clusterserver_proto_rawDescData = file_clusterserver_proto_rawDesc
)

func file_clusterserver_proto_rawDescGZIP() []byte {
	file_clusterserver_proto_rawDescOnce.Do(func() {
		file_clusterserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_clusterserver_proto_rawDescData)
	})
	return file_clusterserver_proto_rawDescData
}

var file_clusterserver_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_clusterserver_proto_goTypes = []interface{}{
	(*ClusterNodeServiceStepRequest)(nil),  // 0: porderer.ClusterNodeServiceStepRequest
	(*ClusterNodeServiceStepResponse)(nil), // 1: porderer.ClusterNodeServiceStepResponse
	(*NodeConsensusRequest)(nil),           // 2: porderer.NodeConsensusRequest
	(*NodeTransactionOrderRequest)(nil),    // 3: porderer.NodeTransactionOrderRequest
	(*TransactionOrderResponse)(nil),       // 4: porderer.TransactionOrderResponse
	(*NodeAuthRequest)(nil),                // 5: porderer.NodeAuthRequest
	(*pcommon.Envelope)(nil),               // 6: pcommon.Envelope
	(pcommon.Status)(0),                    // 7: pcommon.Status
	(*timestamppb.Timestamp)(nil),          // 8: google.protobuf.Timestamp
}
var file_clusterserver_proto_depIdxs = []int32{
	2, // 0: porderer.ClusterNodeServiceStepRequest.node_consensus_req:type_name -> porderer.NodeConsensusRequest
	3, // 1: porderer.ClusterNodeServiceStepRequest.node_transaction_req:type_name -> porderer.NodeTransactionOrderRequest
	5, // 2: porderer.ClusterNodeServiceStepRequest.node_auth_req:type_name -> porderer.NodeAuthRequest
	4, // 3: porderer.ClusterNodeServiceStepResponse.transaction_order_res:type_name -> porderer.TransactionOrderResponse
	6, // 4: porderer.NodeTransactionOrderRequest.payload:type_name -> pcommon.Envelope
	7, // 5: porderer.TransactionOrderResponse.status:type_name -> pcommon.Status
	8, // 6: porderer.NodeAuthRequest.timestamp:type_name -> google.protobuf.Timestamp
	0, // 7: porderer.ClusterNodeService.Step:input_type -> porderer.ClusterNodeServiceStepRequest
	1, // 8: porderer.ClusterNodeService.Step:output_type -> porderer.ClusterNodeServiceStepResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_clusterserver_proto_init() }
func file_clusterserver_proto_init() {
	if File_clusterserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clusterserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNodeServiceStepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNodeServiceStepResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConsensusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeTransactionOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clusterserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_clusterserver_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClusterNodeServiceStepRequest_NodeConsensusReq)(nil),
		(*ClusterNodeServiceStepRequest_NodeTransactionReq)(nil),
		(*ClusterNodeServiceStepRequest_NodeAuthReq)(nil),
	}
	file_clusterserver_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ClusterNodeServiceStepResponse_TransactionOrderRes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clusterserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clusterserver_proto_goTypes,
		DependencyIndexes: file_clusterserver_proto_depIdxs,
		MessageInfos:      file_clusterserver_proto_msgTypes,
	}.Build()
	File_clusterserver_proto = out.File
	file_clusterserver_proto_rawDesc = nil
	file_clusterserver_proto_goTypes = nil
	file_clusterserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ClusterNodeServiceClient is the client API for ClusterNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterNodeServiceClient interface {
	Step(ctx context.Context, opts ...grpc.CallOption) (ClusterNodeService_StepClient, error)
}

type clusterNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterNodeServiceClient(cc grpc.ClientConnInterface) ClusterNodeServiceClient {
	return &clusterNodeServiceClient{cc}
}

func (c *clusterNodeServiceClient) Step(ctx context.Context, opts ...grpc.CallOption) (ClusterNodeService_StepClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ClusterNodeService_serviceDesc.Streams[0], "/porderer.ClusterNodeService/Step", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterNodeServiceStepClient{stream}
	return x, nil
}

type ClusterNodeService_StepClient interface {
	Send(*ClusterNodeServiceStepRequest) error
	Recv() (*ClusterNodeServiceStepResponse, error)
	grpc.ClientStream
}

type clusterNodeServiceStepClient struct {
	grpc.ClientStream
}

func (x *clusterNodeServiceStepClient) Send(m *ClusterNodeServiceStepRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterNodeServiceStepClient) Recv() (*ClusterNodeServiceStepResponse, error) {
	m := new(ClusterNodeServiceStepResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClusterNodeServiceServer is the server API for ClusterNodeService service.
type ClusterNodeServiceServer interface {
	Step(ClusterNodeService_StepServer) error
}

// UnimplementedClusterNodeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedClusterNodeServiceServer struct {
}

func (*UnimplementedClusterNodeServiceServer) Step(ClusterNodeService_StepServer) error {
	return status.Errorf(codes.Unimplemented, "method Step not implemented")
}

func RegisterClusterNodeServiceServer(s *grpc.Server, srv ClusterNodeServiceServer) {
	s.RegisterService(&_ClusterNodeService_serviceDesc, srv)
}

func _ClusterNodeService_Step_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterNodeServiceServer).Step(&clusterNodeServiceStepServer{stream})
}

type ClusterNodeService_StepServer interface {
	Send(*ClusterNodeServiceStepResponse) error
	Recv() (*ClusterNodeServiceStepRequest, error)
	grpc.ServerStream
}

type clusterNodeServiceStepServer struct {
	grpc.ServerStream
}

func (x *clusterNodeServiceStepServer) Send(m *ClusterNodeServiceStepResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterNodeServiceStepServer) Recv() (*ClusterNodeServiceStepRequest, error) {
	m := new(ClusterNodeServiceStepRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClusterNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "porderer.ClusterNodeService",
	HandlerType: (*ClusterNodeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Step",
			Handler:       _ClusterNodeService_Step_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "clusterserver.proto",
}
