syntax = "proto3";

option go_package = "github.com/11090815/mayy/protobuf/porderer";

package porderer;

import "pcommon/common.proto";

// BlockAttestation 结构体包含了两个字段 Header 和 Metadata，用于表示区块的证明信息。
message BlockAttestation {
    // Header 表示区块的头部信息，包括区块的版本、哈希值和时间戳等。
    pcommon.BlockHeader header = 1;
    // Metadata 表示区块的元数据信息，例如区块的交易数量、交易元数据等。
    pcommon.BlockMetadata metadata = 2;
}

// BlockAttestationResponse 结构体表示对区块证明的响应。
message BlockAttestationResponse {
    oneof Type {
        // Status 表示区块证明的响应状态。
        pcommon.Status status = 1;
        // BlockAttestation 表示区块的证明信息。
        BlockAttestation block_attestation = 2;
    }
}

// BlockAttestations gRPC 服务的作用是用于处理区块认证（Block Attestation）请求，并返回一个流（stream）的区块认证响应（BlockAttestationResponse）。
service BlockAttestations {
    // BlockAttestations
    //  1. 区块认证：当节点（peer）收到一个区块的认证请求时，它会调用该 gRPC 服务来处理请求。
    //     区块认证是指对一个新收到的区块进行验证和认证，以确保该区块的有效性和一致性。
    //
    //  2. 传递区块认证结果：该服务返回一个流的区块认证响应，可以提供实时的认证结果信息。这对
    //     于其他节点或组件来说非常有用，因为它们可以及时了解到区块认证的进展和结果，以便进行后续操作。
    rpc BlockAttestations(pcommon.Envelope) returns (stream BlockAttestationResponse);
}

// protoc --proto_path=. --proto_path=$GOPATH/src --proto_path=$MAYY_HOME/protobuf --go_out=plugins=grpc,paths=source_relative:. blockattestation.proto
