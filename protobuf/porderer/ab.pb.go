// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: ab.proto

package porderer

import (
	context "context"
	pcommon "github.com/11090815/mayy/protobuf/pcommon"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SeekBehavior 指定当遇到缺失的区块时的行为。
type SeekInfo_SeekBehavior int32

const (
	// BLOCK_UNTIL_READY 在请求的区块可用之前阻塞回复。
	SeekInfo_BLOCK_UNTIL_READY SeekInfo_SeekBehavior = 0
	// FAIL_IF_NOT_READY 如果请求的区块不可用，则立马返回错误。
	SeekInfo_FAIL_IF_NOT_READY SeekInfo_SeekBehavior = 1
)

// Enum value maps for SeekInfo_SeekBehavior.
var (
	SeekInfo_SeekBehavior_name = map[int32]string{
		0: "BLOCK_UNTIL_READY",
		1: "FAIL_IF_NOT_READY",
	}
	SeekInfo_SeekBehavior_value = map[string]int32{
		"BLOCK_UNTIL_READY": 0,
		"FAIL_IF_NOT_READY": 1,
	}
)

func (x SeekInfo_SeekBehavior) Enum() *SeekInfo_SeekBehavior {
	p := new(SeekInfo_SeekBehavior)
	*p = x
	return p
}

func (x SeekInfo_SeekBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeekInfo_SeekBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_ab_proto_enumTypes[0].Descriptor()
}

func (SeekInfo_SeekBehavior) Type() protoreflect.EnumType {
	return &file_ab_proto_enumTypes[0]
}

func (x SeekInfo_SeekBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeekInfo_SeekBehavior.Descriptor instead.
func (SeekInfo_SeekBehavior) EnumDescriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{6, 0}
}

// SeekErrorResponse 指示服务器如何容忍区块提供者产生的错误。
type SeekInfo_SeekErrorResponse int32

const (
	// STRICT 严格模式，当检测到 orderer 出现问题时，则拒绝交付请求。
	SeekInfo_STRICT SeekInfo_SeekErrorResponse = 0
	// BEST_EFFORT 尽力而为模式，如果共识过程处于错误状态，也会尽力响应区块请求。
	SeekInfo_BEST_EFFORT SeekInfo_SeekErrorResponse = 1
)

// Enum value maps for SeekInfo_SeekErrorResponse.
var (
	SeekInfo_SeekErrorResponse_name = map[int32]string{
		0: "STRICT",
		1: "BEST_EFFORT",
	}
	SeekInfo_SeekErrorResponse_value = map[string]int32{
		"STRICT":      0,
		"BEST_EFFORT": 1,
	}
)

func (x SeekInfo_SeekErrorResponse) Enum() *SeekInfo_SeekErrorResponse {
	p := new(SeekInfo_SeekErrorResponse)
	*p = x
	return p
}

func (x SeekInfo_SeekErrorResponse) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeekInfo_SeekErrorResponse) Descriptor() protoreflect.EnumDescriptor {
	return file_ab_proto_enumTypes[1].Descriptor()
}

func (SeekInfo_SeekErrorResponse) Type() protoreflect.EnumType {
	return &file_ab_proto_enumTypes[1]
}

func (x SeekInfo_SeekErrorResponse) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeekInfo_SeekErrorResponse.Descriptor instead.
func (SeekInfo_SeekErrorResponse) EnumDescriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{6, 1}
}

// SeekContentType 指示响应请求时传递的内容类型。
type SeekInfo_SeekContentType int32

const (
	// BLOCK 传递完整的区块。
	SeekInfo_BLOCK SeekInfo_SeekContentType = 0
	// HEADER_WITHSIG 只传递区块头和签名，不包含有效载荷，用于验证区块是否存在。
	SeekInfo_HEADER_WITHSIG SeekInfo_SeekContentType = 1
)

// Enum value maps for SeekInfo_SeekContentType.
var (
	SeekInfo_SeekContentType_name = map[int32]string{
		0: "BLOCK",
		1: "HEADER_WITHSIG",
	}
	SeekInfo_SeekContentType_value = map[string]int32{
		"BLOCK":          0,
		"HEADER_WITHSIG": 1,
	}
)

func (x SeekInfo_SeekContentType) Enum() *SeekInfo_SeekContentType {
	p := new(SeekInfo_SeekContentType)
	*p = x
	return p
}

func (x SeekInfo_SeekContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeekInfo_SeekContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ab_proto_enumTypes[2].Descriptor()
}

func (SeekInfo_SeekContentType) Type() protoreflect.EnumType {
	return &file_ab_proto_enumTypes[2]
}

func (x SeekInfo_SeekContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeekInfo_SeekContentType.Descriptor instead.
func (SeekInfo_SeekContentType) EnumDescriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{6, 2}
}

// BroadcastResponse 这是一个用于广播响应的消息结构体。
type BroadcastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status 用于表示响应状态码，可以用于在程序中对成功或失败做出响应。
	Status pcommon.Status `protobuf:"varint,1,opt,name=status,proto3,enum=pcommon.Status" json:"status,omitempty"`
	// Info 一个信息字符串，包含有关返回状态的附加信息。
	Info string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *BroadcastResponse) Reset() {
	*x = BroadcastResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BroadcastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BroadcastResponse) ProtoMessage() {}

func (x *BroadcastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BroadcastResponse.ProtoReflect.Descriptor instead.
func (*BroadcastResponse) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{0}
}

func (x *BroadcastResponse) GetStatus() pcommon.Status {
	if x != nil {
		return x.Status
	}
	return pcommon.Status_UNKNOWN
}

func (x *BroadcastResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

// SeekNewest 这是一个用于请求最新数据的消息结构体。该结构体不含任何
// 字段。
type SeekNewest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SeekNewest) Reset() {
	*x = SeekNewest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeekNewest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeekNewest) ProtoMessage() {}

func (x *SeekNewest) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeekNewest.ProtoReflect.Descriptor instead.
func (*SeekNewest) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{1}
}

// SeekOldest 这是一个用于请求最旧数据的消息结构体。该结构体不含任何
// 字段。
type SeekOldest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SeekOldest) Reset() {
	*x = SeekOldest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeekOldest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeekOldest) ProtoMessage() {}

func (x *SeekOldest) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeekOldest.ProtoReflect.Descriptor instead.
func (*SeekOldest) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{2}
}

// SeekSpecified 这是一个用于请求指定数据的消息结构体。
type SeekSpecified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number 用于指定请求的特定数据。
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *SeekSpecified) Reset() {
	*x = SeekSpecified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeekSpecified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeekSpecified) ProtoMessage() {}

func (x *SeekSpecified) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeekSpecified.ProtoReflect.Descriptor instead.
func (*SeekSpecified) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{3}
}

func (x *SeekSpecified) GetNumber() uint64 {
	if x != nil {
		return x.Number
	}
	return 0
}

// SeekNextCommit 用于指示下一个将被提交的区块，它没有任何字段，用于向
// 系统发出请求以获取即将提交的下一个区块的信息。
type SeekNextCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SeekNextCommit) Reset() {
	*x = SeekNextCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeekNextCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeekNextCommit) ProtoMessage() {}

func (x *SeekNextCommit) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeekNextCommit.ProtoReflect.Descriptor instead.
func (*SeekNextCommit) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{4}
}

// SeekPosition 结构体可以根据需要选择不同的子消息类型来请求不同类型的数据。
type SeekPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*SeekPosition_Newest
	//	*SeekPosition_Oldest
	//	*SeekPosition_Specified
	//	*SeekPosition_NextCommit
	Type isSeekPosition_Type `protobuf_oneof:"Type"`
}

func (x *SeekPosition) Reset() {
	*x = SeekPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeekPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeekPosition) ProtoMessage() {}

func (x *SeekPosition) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeekPosition.ProtoReflect.Descriptor instead.
func (*SeekPosition) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{5}
}

func (m *SeekPosition) GetType() isSeekPosition_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *SeekPosition) GetNewest() *SeekNewest {
	if x, ok := x.GetType().(*SeekPosition_Newest); ok {
		return x.Newest
	}
	return nil
}

func (x *SeekPosition) GetOldest() *SeekOldest {
	if x, ok := x.GetType().(*SeekPosition_Oldest); ok {
		return x.Oldest
	}
	return nil
}

func (x *SeekPosition) GetSpecified() *SeekSpecified {
	if x, ok := x.GetType().(*SeekPosition_Specified); ok {
		return x.Specified
	}
	return nil
}

func (x *SeekPosition) GetNextCommit() *SeekNextCommit {
	if x, ok := x.GetType().(*SeekPosition_NextCommit); ok {
		return x.NextCommit
	}
	return nil
}

type isSeekPosition_Type interface {
	isSeekPosition_Type()
}

type SeekPosition_Newest struct {
	// Newest 用于请求最新数据。
	Newest *SeekNewest `protobuf:"bytes,1,opt,name=newest,proto3,oneof"`
}

type SeekPosition_Oldest struct {
	// Oldest 用于请求最旧的数据。
	Oldest *SeekOldest `protobuf:"bytes,2,opt,name=oldest,proto3,oneof"`
}

type SeekPosition_Specified struct {
	// Specified 用于请求指定数据。
	Specified *SeekSpecified `protobuf:"bytes,3,opt,name=specified,proto3,oneof"`
}

type SeekPosition_NextCommit struct {
	// NextCommit 用于请求下一个将被提交的区块。
	NextCommit *SeekNextCommit `protobuf:"bytes,4,opt,name=next_commit,json=nextCommit,proto3,oneof"`
}

func (*SeekPosition_Newest) isSeekPosition_Type() {}

func (*SeekPosition_Oldest) isSeekPosition_Type() {}

func (*SeekPosition_Specified) isSeekPosition_Type() {}

func (*SeekPosition_NextCommit) isSeekPosition_Type() {}

// SeekInfo 该消息结构体可能被用在一个区块链项目中，用于请求和控制区块的传递和处理。
// 它的功能包括指定请求的区块范围、定义遇到缺失区块时的行为、处理区块提供者错误以及
// 指定传递的内容类型。通过使用这个消息结构体，可以更灵活地控制区块的传递和处理过程。
type SeekInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start 指定交付开始的位置。
	Start *SeekPosition `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// Stop 指定交付结束的位置。
	Stop *SeekPosition `protobuf:"bytes,2,opt,name=stop,proto3" json:"stop,omitempty"`
	// Behavior 指定遇到缺失区块时的行为。
	Behavior SeekInfo_SeekBehavior `protobuf:"varint,3,opt,name=behavior,proto3,enum=porderer.SeekInfo_SeekBehavior" json:"behavior,omitempty"`
	// ErrorResponse 指定如何响应交付服务报告的错误。
	ErrorResponse SeekInfo_SeekErrorResponse `protobuf:"varint,4,opt,name=error_response,json=errorResponse,proto3,enum=porderer.SeekInfo_SeekErrorResponse" json:"error_response,omitempty"`
	// ContentType 指定响应请求时传递的内容类型。
	ContentType SeekInfo_SeekContentType `protobuf:"varint,5,opt,name=content_type,json=contentType,proto3,enum=porderer.SeekInfo_SeekContentType" json:"content_type,omitempty"`
}

func (x *SeekInfo) Reset() {
	*x = SeekInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeekInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeekInfo) ProtoMessage() {}

func (x *SeekInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeekInfo.ProtoReflect.Descriptor instead.
func (*SeekInfo) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{6}
}

func (x *SeekInfo) GetStart() *SeekPosition {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *SeekInfo) GetStop() *SeekPosition {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *SeekInfo) GetBehavior() SeekInfo_SeekBehavior {
	if x != nil {
		return x.Behavior
	}
	return SeekInfo_BLOCK_UNTIL_READY
}

func (x *SeekInfo) GetErrorResponse() SeekInfo_SeekErrorResponse {
	if x != nil {
		return x.ErrorResponse
	}
	return SeekInfo_STRICT
}

func (x *SeekInfo) GetContentType() SeekInfo_SeekContentType {
	if x != nil {
		return x.ContentType
	}
	return SeekInfo_BLOCK
}

// DeliverResponse 通过该消息结构，orderer 可以根据请求的不同情况返回不同类型的响应，
// 包括状态信息和区块内容。这样可以使交付服务更加灵活和具有针对性，满足不同客户端的需求。
type DeliverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*DeliverResponse_Status
	//	*DeliverResponse_Block
	Type isDeliverResponse_Type `protobuf_oneof:"Type"`
}

func (x *DeliverResponse) Reset() {
	*x = DeliverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ab_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeliverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeliverResponse) ProtoMessage() {}

func (x *DeliverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ab_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeliverResponse.ProtoReflect.Descriptor instead.
func (*DeliverResponse) Descriptor() ([]byte, []int) {
	return file_ab_proto_rawDescGZIP(), []int{7}
}

func (m *DeliverResponse) GetType() isDeliverResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *DeliverResponse) GetStatus() pcommon.Status {
	if x, ok := x.GetType().(*DeliverResponse_Status); ok {
		return x.Status
	}
	return pcommon.Status_UNKNOWN
}

func (x *DeliverResponse) GetBlock() *pcommon.Block {
	if x, ok := x.GetType().(*DeliverResponse_Block); ok {
		return x.Block
	}
	return nil
}

type isDeliverResponse_Type interface {
	isDeliverResponse_Type()
}

type DeliverResponse_Status struct {
	// Status 用于返回交付请求的状态，这个字段通常包含有关请求处理结果的信息，例如
	// 成功与否、错误代码等。
	Status pcommon.Status `protobuf:"varint,1,opt,name=status,proto3,enum=pcommon.Status,oneof"`
}

type DeliverResponse_Block struct {
	// Block 用于返回交付请求中请求的区块内容。
	Block *pcommon.Block `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

func (*DeliverResponse_Status) isDeliverResponse_Type() {}

func (*DeliverResponse_Block) isDeliverResponse_Type() {}

var File_ab_proto protoreflect.FileDescriptor

var file_ab_proto_rawDesc = []byte{
	0x0a, 0x08, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x1a, 0x14, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x11, 0x42, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x0c, 0x0a, 0x0a,
	0x53, 0x65, 0x65, 0x6b, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x53, 0x65,
	0x65, 0x6b, 0x4f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x0d, 0x53, 0x65, 0x65, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x65, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x65, 0x6b, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x65, 0x6b, 0x4e, 0x65, 0x77, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x65,
	0x77, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x65, 0x6b, 0x4f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x6c,
	0x64, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x65, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x65, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xd7, 0x03, 0x0a, 0x08, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x65, 0x6b, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2a, 0x0a,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x65, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x3b, 0x0a, 0x08, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x65, 0x65, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x65, 0x65, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x65, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65,
	0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x0c, 0x53, 0x65,
	0x65, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x49, 0x4c, 0x5f, 0x49, 0x46, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x22, 0x30, 0x0a, 0x11, 0x53, 0x65, 0x65, 0x6b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x22, 0x30, 0x0a, 0x0f, 0x53, 0x65,
	0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x53, 0x49, 0x47, 0x10, 0x01, 0x22, 0x6c, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x32, 0x8f, 0x01, 0x0a, 0x0f, 0x41,
	0x74, 0x6f, 0x6d, 0x69, 0x63, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x3f,
	0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x1b,
	0x2e, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x3b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x70, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x19, 0x2e,
	0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2c, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39, 0x30,
	0x38, 0x31, 0x35, 0x2f, 0x6d, 0x61, 0x79, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x70, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ab_proto_rawDescOnce sync.Once
	file_ab_proto_rawDescData = file_ab_proto_rawDesc
)

func file_ab_proto_rawDescGZIP() []byte {
	file_ab_proto_rawDescOnce.Do(func() {
		file_ab_proto_rawDescData = protoimpl.X.CompressGZIP(file_ab_proto_rawDescData)
	})
	return file_ab_proto_rawDescData
}

var file_ab_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ab_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ab_proto_goTypes = []interface{}{
	(SeekInfo_SeekBehavior)(0),      // 0: porderer.SeekInfo.SeekBehavior
	(SeekInfo_SeekErrorResponse)(0), // 1: porderer.SeekInfo.SeekErrorResponse
	(SeekInfo_SeekContentType)(0),   // 2: porderer.SeekInfo.SeekContentType
	(*BroadcastResponse)(nil),       // 3: porderer.BroadcastResponse
	(*SeekNewest)(nil),              // 4: porderer.SeekNewest
	(*SeekOldest)(nil),              // 5: porderer.SeekOldest
	(*SeekSpecified)(nil),           // 6: porderer.SeekSpecified
	(*SeekNextCommit)(nil),          // 7: porderer.SeekNextCommit
	(*SeekPosition)(nil),            // 8: porderer.SeekPosition
	(*SeekInfo)(nil),                // 9: porderer.SeekInfo
	(*DeliverResponse)(nil),         // 10: porderer.DeliverResponse
	(pcommon.Status)(0),             // 11: pcommon.Status
	(*pcommon.Block)(nil),           // 12: pcommon.Block
	(*pcommon.Envelope)(nil),        // 13: pcommon.Envelope
}
var file_ab_proto_depIdxs = []int32{
	11, // 0: porderer.BroadcastResponse.status:type_name -> pcommon.Status
	4,  // 1: porderer.SeekPosition.newest:type_name -> porderer.SeekNewest
	5,  // 2: porderer.SeekPosition.oldest:type_name -> porderer.SeekOldest
	6,  // 3: porderer.SeekPosition.specified:type_name -> porderer.SeekSpecified
	7,  // 4: porderer.SeekPosition.next_commit:type_name -> porderer.SeekNextCommit
	8,  // 5: porderer.SeekInfo.start:type_name -> porderer.SeekPosition
	8,  // 6: porderer.SeekInfo.stop:type_name -> porderer.SeekPosition
	0,  // 7: porderer.SeekInfo.behavior:type_name -> porderer.SeekInfo.SeekBehavior
	1,  // 8: porderer.SeekInfo.error_response:type_name -> porderer.SeekInfo.SeekErrorResponse
	2,  // 9: porderer.SeekInfo.content_type:type_name -> porderer.SeekInfo.SeekContentType
	11, // 10: porderer.DeliverResponse.status:type_name -> pcommon.Status
	12, // 11: porderer.DeliverResponse.block:type_name -> pcommon.Block
	13, // 12: porderer.AtomicBroadcast.Broadcast:input_type -> pcommon.Envelope
	13, // 13: porderer.AtomicBroadcast.Deliver:input_type -> pcommon.Envelope
	3,  // 14: porderer.AtomicBroadcast.Broadcast:output_type -> porderer.BroadcastResponse
	10, // 15: porderer.AtomicBroadcast.Deliver:output_type -> porderer.DeliverResponse
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_ab_proto_init() }
func file_ab_proto_init() {
	if File_ab_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ab_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BroadcastResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeekNewest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeekOldest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeekSpecified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeekNextCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeekPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeekInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ab_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeliverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ab_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SeekPosition_Newest)(nil),
		(*SeekPosition_Oldest)(nil),
		(*SeekPosition_Specified)(nil),
		(*SeekPosition_NextCommit)(nil),
	}
	file_ab_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*DeliverResponse_Status)(nil),
		(*DeliverResponse_Block)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ab_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ab_proto_goTypes,
		DependencyIndexes: file_ab_proto_depIdxs,
		EnumInfos:         file_ab_proto_enumTypes,
		MessageInfos:      file_ab_proto_msgTypes,
	}.Build()
	File_ab_proto = out.File
	file_ab_proto_rawDesc = nil
	file_ab_proto_goTypes = nil
	file_ab_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AtomicBroadcastClient is the client API for AtomicBroadcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AtomicBroadcastClient interface {
	// Broadcast 方法接收一个流式的 pcommon.Envelope 消息流，每个消息代表一个要广播的交易或请求。
	// 返回一个流式的 BroadcastResponse 消息流，其中每个消息对应于 Broadcast 方法接收到的 pcommon.Envelope
	// 消息的响应，表示成功或失败的信息。
	Broadcast(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcast_BroadcastClient, error)
	// Deliver 方法首先接收一个流式的 pcommon.Envelope 消息流，该消息流中包含一个类型为 DELIVER_SEEK_INFO 的
	// Envelope，其中的 Payload 数据是一个序列化后的 SeekInfo 消息。然后，该方法返回一个流式的 DeliverResponse
	// 消息流，其中包含了按顺序发送的区块回复。返回一个流式的 DeliverResponse 消息流，其中每个消息对应于根据接收
	// 到的 DELIVER_SEEK_INFO 消息请求的区块内容。
	Deliver(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcast_DeliverClient, error)
}

type atomicBroadcastClient struct {
	cc grpc.ClientConnInterface
}

func NewAtomicBroadcastClient(cc grpc.ClientConnInterface) AtomicBroadcastClient {
	return &atomicBroadcastClient{cc}
}

func (c *atomicBroadcastClient) Broadcast(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcast_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AtomicBroadcast_serviceDesc.Streams[0], "/porderer.AtomicBroadcast/Broadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &atomicBroadcastBroadcastClient{stream}
	return x, nil
}

type AtomicBroadcast_BroadcastClient interface {
	Send(*pcommon.Envelope) error
	Recv() (*BroadcastResponse, error)
	grpc.ClientStream
}

type atomicBroadcastBroadcastClient struct {
	grpc.ClientStream
}

func (x *atomicBroadcastBroadcastClient) Send(m *pcommon.Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atomicBroadcastBroadcastClient) Recv() (*BroadcastResponse, error) {
	m := new(BroadcastResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atomicBroadcastClient) Deliver(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcast_DeliverClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AtomicBroadcast_serviceDesc.Streams[1], "/porderer.AtomicBroadcast/Deliver", opts...)
	if err != nil {
		return nil, err
	}
	x := &atomicBroadcastDeliverClient{stream}
	return x, nil
}

type AtomicBroadcast_DeliverClient interface {
	Send(*pcommon.Envelope) error
	Recv() (*DeliverResponse, error)
	grpc.ClientStream
}

type atomicBroadcastDeliverClient struct {
	grpc.ClientStream
}

func (x *atomicBroadcastDeliverClient) Send(m *pcommon.Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atomicBroadcastDeliverClient) Recv() (*DeliverResponse, error) {
	m := new(DeliverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AtomicBroadcastServer is the server API for AtomicBroadcast service.
type AtomicBroadcastServer interface {
	// Broadcast 方法接收一个流式的 pcommon.Envelope 消息流，每个消息代表一个要广播的交易或请求。
	// 返回一个流式的 BroadcastResponse 消息流，其中每个消息对应于 Broadcast 方法接收到的 pcommon.Envelope
	// 消息的响应，表示成功或失败的信息。
	Broadcast(AtomicBroadcast_BroadcastServer) error
	// Deliver 方法首先接收一个流式的 pcommon.Envelope 消息流，该消息流中包含一个类型为 DELIVER_SEEK_INFO 的
	// Envelope，其中的 Payload 数据是一个序列化后的 SeekInfo 消息。然后，该方法返回一个流式的 DeliverResponse
	// 消息流，其中包含了按顺序发送的区块回复。返回一个流式的 DeliverResponse 消息流，其中每个消息对应于根据接收
	// 到的 DELIVER_SEEK_INFO 消息请求的区块内容。
	Deliver(AtomicBroadcast_DeliverServer) error
}

// UnimplementedAtomicBroadcastServer can be embedded to have forward compatible implementations.
type UnimplementedAtomicBroadcastServer struct {
}

func (*UnimplementedAtomicBroadcastServer) Broadcast(AtomicBroadcast_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (*UnimplementedAtomicBroadcastServer) Deliver(AtomicBroadcast_DeliverServer) error {
	return status.Errorf(codes.Unimplemented, "method Deliver not implemented")
}

func RegisterAtomicBroadcastServer(s *grpc.Server, srv AtomicBroadcastServer) {
	s.RegisterService(&_AtomicBroadcast_serviceDesc, srv)
}

func _AtomicBroadcast_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtomicBroadcastServer).Broadcast(&atomicBroadcastBroadcastServer{stream})
}

type AtomicBroadcast_BroadcastServer interface {
	Send(*BroadcastResponse) error
	Recv() (*pcommon.Envelope, error)
	grpc.ServerStream
}

type atomicBroadcastBroadcastServer struct {
	grpc.ServerStream
}

func (x *atomicBroadcastBroadcastServer) Send(m *BroadcastResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atomicBroadcastBroadcastServer) Recv() (*pcommon.Envelope, error) {
	m := new(pcommon.Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AtomicBroadcast_Deliver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtomicBroadcastServer).Deliver(&atomicBroadcastDeliverServer{stream})
}

type AtomicBroadcast_DeliverServer interface {
	Send(*DeliverResponse) error
	Recv() (*pcommon.Envelope, error)
	grpc.ServerStream
}

type atomicBroadcastDeliverServer struct {
	grpc.ServerStream
}

func (x *atomicBroadcastDeliverServer) Send(m *DeliverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atomicBroadcastDeliverServer) Recv() (*pcommon.Envelope, error) {
	m := new(pcommon.Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AtomicBroadcast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "porderer.AtomicBroadcast",
	HandlerType: (*AtomicBroadcastServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _AtomicBroadcast_Broadcast_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Deliver",
			Handler:       _AtomicBroadcast_Deliver_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ab.proto",
}
