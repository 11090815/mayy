// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: msp_principle.proto

package pmsp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MSPPrinciple_Classification int32

const (
	MSPPrinciple_ROLE              MSPPrinciple_Classification = 0 // ROLE 表示 MSP 网络中的成员角色或者管理员角色。
	MSPPrinciple_ORGANIZATION_UNIT MSPPrinciple_Classification = 1 // ORGANIZATION_UNIT 表示基于身份所属的组织单位在 MSP 中的分类。
	MSPPrinciple_IDENTITY          MSPPrinciple_Classification = 2 // IDENTITY 表示由单个身份/证书组成的主体。
	MSPPrinciple_ANONYMITY         MSPPrinciple_Classification = 3 // ANONYMITY 表示可以强制使身份匿名或具名的主体。
	MSPPrinciple_COMBINED          MSPPrinciple_Classification = 4 // COMBINED 表示组合的主体。
)

// Enum value maps for MSPPrinciple_Classification.
var (
	MSPPrinciple_Classification_name = map[int32]string{
		0: "ROLE",
		1: "ORGANIZATION_UNIT",
		2: "IDENTITY",
		3: "ANONYMITY",
		4: "COMBINED",
	}
	MSPPrinciple_Classification_value = map[string]int32{
		"ROLE":              0,
		"ORGANIZATION_UNIT": 1,
		"IDENTITY":          2,
		"ANONYMITY":         3,
		"COMBINED":          4,
	}
)

func (x MSPPrinciple_Classification) Enum() *MSPPrinciple_Classification {
	p := new(MSPPrinciple_Classification)
	*p = x
	return p
}

func (x MSPPrinciple_Classification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSPPrinciple_Classification) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_principle_proto_enumTypes[0].Descriptor()
}

func (MSPPrinciple_Classification) Type() protoreflect.EnumType {
	return &file_msp_principle_proto_enumTypes[0]
}

func (x MSPPrinciple_Classification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSPPrinciple_Classification.Descriptor instead.
func (MSPPrinciple_Classification) EnumDescriptor() ([]byte, []int) {
	return file_msp_principle_proto_rawDescGZIP(), []int{0, 0}
}

type MSPRole_MSPRoleType int32

const (
	MSPRole_MEMBER  MSPRole_MSPRoleType = 0 // MEMBER 表示 MSP 成员。
	MSPRole_ADMIN   MSPRole_MSPRoleType = 1 // ADMIN 表示 MSP 管理员。
	MSPRole_CLIENT  MSPRole_MSPRoleType = 2 // CLIENT 表示 MSP 客户端。
	MSPRole_PEER    MSPRole_MSPRoleType = 3 // PEER 表示 MSP 节点。
	MSPRole_ORDERER MSPRole_MSPRoleType = 4 // ORDERER 表示 MSP 排序服务。
)

// Enum value maps for MSPRole_MSPRoleType.
var (
	MSPRole_MSPRoleType_name = map[int32]string{
		0: "MEMBER",
		1: "ADMIN",
		2: "CLIENT",
		3: "PEER",
		4: "ORDERER",
	}
	MSPRole_MSPRoleType_value = map[string]int32{
		"MEMBER":  0,
		"ADMIN":   1,
		"CLIENT":  2,
		"PEER":    3,
		"ORDERER": 4,
	}
)

func (x MSPRole_MSPRoleType) Enum() *MSPRole_MSPRoleType {
	p := new(MSPRole_MSPRoleType)
	*p = x
	return p
}

func (x MSPRole_MSPRoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSPRole_MSPRoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_principle_proto_enumTypes[1].Descriptor()
}

func (MSPRole_MSPRoleType) Type() protoreflect.EnumType {
	return &file_msp_principle_proto_enumTypes[1]
}

func (x MSPRole_MSPRoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSPRole_MSPRoleType.Descriptor instead.
func (MSPRole_MSPRoleType) EnumDescriptor() ([]byte, []int) {
	return file_msp_principle_proto_rawDescGZIP(), []int{2, 0}
}

type MSPIdentityAnonymity_MSPIdentityAnonymityType int32

const (
	MSPIdentityAnonymity_NOMINAL   MSPIdentityAnonymity_MSPIdentityAnonymityType = 0 // NOMINAL 表示一个具名的 MSP 身份。
	MSPIdentityAnonymity_ANONYMOUS MSPIdentityAnonymity_MSPIdentityAnonymityType = 1 // ANONYMOUS 表示一个匿名的 MSP 身份。
)

// Enum value maps for MSPIdentityAnonymity_MSPIdentityAnonymityType.
var (
	MSPIdentityAnonymity_MSPIdentityAnonymityType_name = map[int32]string{
		0: "NOMINAL",
		1: "ANONYMOUS",
	}
	MSPIdentityAnonymity_MSPIdentityAnonymityType_value = map[string]int32{
		"NOMINAL":   0,
		"ANONYMOUS": 1,
	}
)

func (x MSPIdentityAnonymity_MSPIdentityAnonymityType) Enum() *MSPIdentityAnonymity_MSPIdentityAnonymityType {
	p := new(MSPIdentityAnonymity_MSPIdentityAnonymityType)
	*p = x
	return p
}

func (x MSPIdentityAnonymity_MSPIdentityAnonymityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MSPIdentityAnonymity_MSPIdentityAnonymityType) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_principle_proto_enumTypes[2].Descriptor()
}

func (MSPIdentityAnonymity_MSPIdentityAnonymityType) Type() protoreflect.EnumType {
	return &file_msp_principle_proto_enumTypes[2]
}

func (x MSPIdentityAnonymity_MSPIdentityAnonymityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MSPIdentityAnonymity_MSPIdentityAnonymityType.Descriptor instead.
func (MSPIdentityAnonymity_MSPIdentityAnonymityType) EnumDescriptor() ([]byte, []int) {
	return file_msp_principle_proto_rawDescGZIP(), []int{3, 0}
}

// MSPPrinciple 旨在表示以 MSP 为中心的一组身份，具体而言，该结构允许定义以下内容：
//  1. 一组属于同一 MSP 的身份。
//  2. 一组属于同一 MSP 中同一组织单位的身份。
//  3. 一组管理特定 MSP 的身份。
//  4. 一个具体的身份。
//
// 根据下面的这些字段来表示这些组：
//   - Classification：定义 MSP 中身份的分类类型，Classification 可以有三个值：
//     1. ByMSPRole：表示基于预定义的 MSP 规则之一 (admin 和 member) 对 MSP 内的身份进行分类。
//     2. ByOrganizationUnit：表示基于身份所属的组织单位对 MSP 内的身份进行分类。
//     3. ByIdentity：表示 MSPPrinciple 映射到单个身份/证书，这意味着 Principle 字段是身份的字节信息。
type MSPPrinciple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PrincipleClassification 表示如何处理 Principle 的分类方式，分类方式包括：
	//  1. ByOrganizationUnit：表示 Principle 中包含 MSP 处理的组织的名称。
	//  2. ByIdentity：表示 Principle 中包含特定身份。
	//  3. 默认值：表示 Principle 包含默认由所有 MSP 支持的组中的一个，admin 或者 member。
	PrincipleClassification MSPPrinciple_Classification `protobuf:"varint,1,opt,name=principle_classification,json=principleClassification,proto3,enum=pmsp.MSPPrinciple_Classification" json:"principle_classification,omitempty"`
	// Principle 表示完成策略主体定义的 Principle，对于默认的主体类型，Principle 可以是 admin 或者是
	// member；对于 ByOrganizationUnit / ByIdentity 分类类型，PolicyPrinciple 从组织单位或者身份中
	// 获取其值；对于 Combined 分类类型，Principle 是一个序列化的 CombinedPrinciple。
	Principle []byte `protobuf:"bytes,2,opt,name=principle,proto3" json:"principle,omitempty"`
}

func (x *MSPPrinciple) Reset() {
	*x = MSPPrinciple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_principle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSPPrinciple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSPPrinciple) ProtoMessage() {}

func (x *MSPPrinciple) ProtoReflect() protoreflect.Message {
	mi := &file_msp_principle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSPPrinciple.ProtoReflect.Descriptor instead.
func (*MSPPrinciple) Descriptor() ([]byte, []int) {
	return file_msp_principle_proto_rawDescGZIP(), []int{0}
}

func (x *MSPPrinciple) GetPrincipleClassification() MSPPrinciple_Classification {
	if x != nil {
		return x.PrincipleClassification
	}
	return MSPPrinciple_ROLE
}

func (x *MSPPrinciple) GetPrinciple() []byte {
	if x != nil {
		return x.Principle
	}
	return nil
}

// OrganizationUnit 用于管理策略主体的 Principle 字段中特定组织单位成员的组织。
type OrganizationUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspIdentifier              string `protobuf:"bytes,1,opt,name=msp_identifier,json=mspIdentifier,proto3" json:"msp_identifier,omitempty"`                                          // MspIdentifier 表示此组织单位所指的 MSP 的标识符。
	OrganizationUnitIdentifier string `protobuf:"bytes,2,opt,name=organization_unit_identifier,json=organizationUnitIdentifier,proto3" json:"organization_unit_identifier,omitempty"` // OrganizationUnitIdentifier 定义 MSP 标识符所指的组织单位。
	CertifiersIdentifier       []byte `protobuf:"bytes,3,opt,name=certifiers_identifier,json=certifiersIdentifier,proto3" json:"certifiers_identifier,omitempty"`                     // CertifiersIdentifier 是与此组织单元相关的证书信任链的哈希值。
}

func (x *OrganizationUnit) Reset() {
	*x = OrganizationUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_principle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationUnit) ProtoMessage() {}

func (x *OrganizationUnit) ProtoReflect() protoreflect.Message {
	mi := &file_msp_principle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationUnit.ProtoReflect.Descriptor instead.
func (*OrganizationUnit) Descriptor() ([]byte, []int) {
	return file_msp_principle_proto_rawDescGZIP(), []int{1}
}

func (x *OrganizationUnit) GetMspIdentifier() string {
	if x != nil {
		return x.MspIdentifier
	}
	return ""
}

func (x *OrganizationUnit) GetOrganizationUnitIdentifier() string {
	if x != nil {
		return x.OrganizationUnitIdentifier
	}
	return ""
}

func (x *OrganizationUnit) GetCertifiersIdentifier() []byte {
	if x != nil {
		return x.CertifiersIdentifier
	}
	return nil
}

// MSPRole 用于在 MSPPrinciple 的 Principle 字段中定义 MSP 中的两个专用角色之一 (admin 和 member) 的组织。
type MSPRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MspIdentifier string `protobuf:"bytes,1,opt,name=msp_identifier,json=mspIdentifier,proto3" json:"msp_identifier,omitempty"` // MspIdentifier 表示此主体所指的 MSP 的标识符。
	// MSPRoleType 定义了一个身份在标识符为 MSPIdentifier 的 MSP 中应该拥有哪些可用的预定义 MSP 角色。
	Role MSPRole_MSPRoleType `protobuf:"varint,2,opt,name=role,proto3,enum=pmsp.MSPRole_MSPRoleType" json:"role,omitempty"`
}

func (x *MSPRole) Reset() {
	*x = MSPRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_principle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSPRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSPRole) ProtoMessage() {}

func (x *MSPRole) ProtoReflect() protoreflect.Message {
	mi := &file_msp_principle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSPRole.ProtoReflect.Descriptor instead.
func (*MSPRole) Descriptor() ([]byte, []int) {
	return file_msp_principle_proto_rawDescGZIP(), []int{2}
}

func (x *MSPRole) GetMspIdentifier() string {
	if x != nil {
		return x.MspIdentifier
	}
	return ""
}

func (x *MSPRole) GetRole() MSPRole_MSPRoleType {
	if x != nil {
		return x.Role
	}
	return MSPRole_MEMBER
}

// MSPIdentityAnonymity 可以用来强制一个身份是匿名或具名的。
type MSPIdentityAnonymity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnonymityType MSPIdentityAnonymity_MSPIdentityAnonymityType `protobuf:"varint,1,opt,name=anonymity_type,json=anonymityType,proto3,enum=pmsp.MSPIdentityAnonymity_MSPIdentityAnonymityType" json:"anonymity_type,omitempty"` // AnonymityType 表示一个 MSP 身份是匿名的还是具名的。
}

func (x *MSPIdentityAnonymity) Reset() {
	*x = MSPIdentityAnonymity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_principle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSPIdentityAnonymity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSPIdentityAnonymity) ProtoMessage() {}

func (x *MSPIdentityAnonymity) ProtoReflect() protoreflect.Message {
	mi := &file_msp_principle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSPIdentityAnonymity.ProtoReflect.Descriptor instead.
func (*MSPIdentityAnonymity) Descriptor() ([]byte, []int) {
	return file_msp_principle_proto_rawDescGZIP(), []int{3}
}

func (x *MSPIdentityAnonymity) GetAnonymityType() MSPIdentityAnonymity_MSPIdentityAnonymityType {
	if x != nil {
		return x.AnonymityType
	}
	return MSPIdentityAnonymity_NOMINAL
}

// CombinedPrinciple 当 PrincipleClassification 表明需要 combined 形式的主体时，CombinedPrinciple 将管
// 理策略主体的 Principle 字段的组织
type CombinedPrinciple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principles []*MSPPrinciple `protobuf:"bytes,1,rep,name=principles,proto3" json:"principles,omitempty"` // Principles 表示 combined 主体。
}

func (x *CombinedPrinciple) Reset() {
	*x = CombinedPrinciple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_principle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinedPrinciple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinedPrinciple) ProtoMessage() {}

func (x *CombinedPrinciple) ProtoReflect() protoreflect.Message {
	mi := &file_msp_principle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinedPrinciple.ProtoReflect.Descriptor instead.
func (*CombinedPrinciple) Descriptor() ([]byte, []int) {
	return file_msp_principle_proto_rawDescGZIP(), []int{4}
}

func (x *CombinedPrinciple) GetPrinciples() []*MSPPrinciple {
	if x != nil {
		return x.Principles
	}
	return nil
}

var File_msp_principle_proto protoreflect.FileDescriptor

var file_msp_principle_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x73, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x70, 0x6d, 0x73, 0x70, 0x22, 0xe8, 0x01, 0x0a, 0x0c,
	0x4d, 0x53, 0x50, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x5c, 0x0a, 0x18,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e, 0x4d, 0x53, 0x50, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x5c, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x4f,
	0x4e, 0x59, 0x4d, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x42,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x73, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x73, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xa8, 0x01, 0x0a, 0x07, 0x4d, 0x53,
	0x50, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x73, 0x70, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d,
	0x73, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x6d, 0x73,
	0x70, 0x2e, 0x4d, 0x53, 0x50, 0x52, 0x6f, 0x6c, 0x65, 0x2e, 0x4d, 0x53, 0x50, 0x52, 0x6f, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x47, 0x0a, 0x0b, 0x4d,
	0x53, 0x50, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45,
	0x4d, 0x42, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x45, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x45, 0x52, 0x10, 0x04, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x4d, 0x53, 0x50, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a,
	0x0e, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e, 0x4d, 0x53, 0x50,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74,
	0x79, 0x2e, 0x4d, 0x53, 0x50, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x18, 0x4d, 0x53, 0x50,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x10,
	0x01, 0x22, 0x47, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6d, 0x73,
	0x70, 0x2e, 0x4d, 0x53, 0x50, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39, 0x30, 0x38, 0x31,
	0x35, 0x2f, 0x6d, 0x61, 0x79, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x70, 0x6d, 0x73, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msp_principle_proto_rawDescOnce sync.Once
	file_msp_principle_proto_rawDescData = file_msp_principle_proto_rawDesc
)

func file_msp_principle_proto_rawDescGZIP() []byte {
	file_msp_principle_proto_rawDescOnce.Do(func() {
		file_msp_principle_proto_rawDescData = protoimpl.X.CompressGZIP(file_msp_principle_proto_rawDescData)
	})
	return file_msp_principle_proto_rawDescData
}

var file_msp_principle_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_msp_principle_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_msp_principle_proto_goTypes = []interface{}{
	(MSPPrinciple_Classification)(0),                   // 0: pmsp.MSPPrinciple.Classification
	(MSPRole_MSPRoleType)(0),                           // 1: pmsp.MSPRole.MSPRoleType
	(MSPIdentityAnonymity_MSPIdentityAnonymityType)(0), // 2: pmsp.MSPIdentityAnonymity.MSPIdentityAnonymityType
	(*MSPPrinciple)(nil),                               // 3: pmsp.MSPPrinciple
	(*OrganizationUnit)(nil),                           // 4: pmsp.OrganizationUnit
	(*MSPRole)(nil),                                    // 5: pmsp.MSPRole
	(*MSPIdentityAnonymity)(nil),                       // 6: pmsp.MSPIdentityAnonymity
	(*CombinedPrinciple)(nil),                          // 7: pmsp.CombinedPrinciple
}
var file_msp_principle_proto_depIdxs = []int32{
	0, // 0: pmsp.MSPPrinciple.principle_classification:type_name -> pmsp.MSPPrinciple.Classification
	1, // 1: pmsp.MSPRole.role:type_name -> pmsp.MSPRole.MSPRoleType
	2, // 2: pmsp.MSPIdentityAnonymity.anonymity_type:type_name -> pmsp.MSPIdentityAnonymity.MSPIdentityAnonymityType
	3, // 3: pmsp.CombinedPrinciple.principles:type_name -> pmsp.MSPPrinciple
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_msp_principle_proto_init() }
func file_msp_principle_proto_init() {
	if File_msp_principle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msp_principle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSPPrinciple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_principle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_principle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSPRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_principle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSPIdentityAnonymity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_principle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombinedPrinciple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msp_principle_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msp_principle_proto_goTypes,
		DependencyIndexes: file_msp_principle_proto_depIdxs,
		EnumInfos:         file_msp_principle_proto_enumTypes,
		MessageInfos:      file_msp_principle_proto_msgTypes,
	}.Build()
	File_msp_principle_proto = out.File
	file_msp_principle_proto_rawDesc = nil
	file_msp_principle_proto_goTypes = nil
	file_msp_principle_proto_depIdxs = nil
}
