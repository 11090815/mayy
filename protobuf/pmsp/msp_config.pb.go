// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.4
// source: msp_config.proto

package pmsp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MSPConfig 收集了 msp 的所有配置信息。
type MSPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`    // Type 反映 msp 的类型，默认是 MAYY，其实现基于 X.509。
	Config []byte `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"` // Config 表示 msp 特定的配置信息，即 *MayyMSPConfig 的 protobuf 编码。
}

func (x *MSPConfig) Reset() {
	*x = MSPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MSPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MSPConfig) ProtoMessage() {}

func (x *MSPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MSPConfig.ProtoReflect.Descriptor instead.
func (*MSPConfig) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{0}
}

func (x *MSPConfig) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *MSPConfig) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

// MayyMSPConfig 收集了 Mayy Config 的所有配置信息。
type MayyMSPConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name 表示 msp 的标识符，由管理该 msp 的应用程序选择。
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// RootCerts 表示 msp 信任的根证书列表，这些证书用于证书验证。
	RootCerts [][]byte `protobuf:"bytes,2,rep,name=root_certs,json=rootCerts,proto3" json:"root_certs,omitempty"`
	// IntermediateCerts 表示 msp 信任的中间证书列表，在证书验证时，验证过程会尝试从待验证的证书构建一条
	// 路径，该路径的一端是待验证的证书，另一端是 RootCerts 字段中的某个证书，如果路径长度超过 2，证书验证
	// 过程会在 IntermediateCerts 字段中搜索中间证书。
	IntermediateCerts [][]byte `protobuf:"bytes,3,rep,name=intermediate_certs,json=intermediateCerts,proto3" json:"intermediate_certs,omitempty"`
	// Admins 表示该 msp 的管理员身份。
	Admins [][]byte `protobuf:"bytes,4,rep,name=admins,proto3" json:"admins,omitempty"`
	// RevocationList 表示由 msp 维护的被吊销的证书列表。
	RevocationList [][]byte `protobuf:"bytes,5,rep,name=revocation_list,json=revocationList,proto3" json:"revocation_list,omitempty"`
	// SigningIdentity 保存对等体将要使用的签名身份信息，该信息将由前面定义的 msp 导入。
	SigningIdentity *SigningIdentityInfo `protobuf:"bytes,6,opt,name=signing_identity,json=signingIdentity,proto3" json:"signing_identity,omitempty"`
	// OrganizationUnitIdentifiers 表示属于该 msp 配置的一个或多个 Mayy 组织单元标识符。
	OrganizationUnitIdentifiers []*MayyOUIdentifier `protobuf:"bytes,7,rep,name=organization_unit_identifiers,json=organizationUnitIdentifiers,proto3" json:"organization_unit_identifiers,omitempty"`
	// CryptoConfig 包含该 msp 使用的加密算法的配置参数。
	CryptoConfig *MayyCryptoConfig `protobuf:"bytes,8,opt,name=crypto_config,json=cryptoConfig,proto3" json:"crypto_config,omitempty"`
	// TlsRootCerts 表示该 msp 信任的 TLS 根证书列表。
	TlsRootCerts [][]byte `protobuf:"bytes,9,rep,name=tls_root_certs,json=tlsRootCerts,proto3" json:"tls_root_certs,omitempty"`
	// TlsIntermediateCerts 表示该 msp 信任的 TLS 中间证书列表。
	TlsIntermediateCerts [][]byte `protobuf:"bytes,10,rep,name=tls_intermediate_certs,json=tlsIntermediateCerts,proto3" json:"tls_intermediate_certs,omitempty"`
	// MayyNodeOus 包含根据 OUs 区分 clients、peers 和 orderers 的配置信息。
	MayyNodeOus *MayyNodeOUs `protobuf:"bytes,11,opt,name=mayy_node_ous,json=mayyNodeOus,proto3" json:"mayy_node_ous,omitempty"`
}

func (x *MayyMSPConfig) Reset() {
	*x = MayyMSPConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MayyMSPConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MayyMSPConfig) ProtoMessage() {}

func (x *MayyMSPConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MayyMSPConfig.ProtoReflect.Descriptor instead.
func (*MayyMSPConfig) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{1}
}

func (x *MayyMSPConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MayyMSPConfig) GetRootCerts() [][]byte {
	if x != nil {
		return x.RootCerts
	}
	return nil
}

func (x *MayyMSPConfig) GetIntermediateCerts() [][]byte {
	if x != nil {
		return x.IntermediateCerts
	}
	return nil
}

func (x *MayyMSPConfig) GetAdmins() [][]byte {
	if x != nil {
		return x.Admins
	}
	return nil
}

func (x *MayyMSPConfig) GetRevocationList() [][]byte {
	if x != nil {
		return x.RevocationList
	}
	return nil
}

func (x *MayyMSPConfig) GetSigningIdentity() *SigningIdentityInfo {
	if x != nil {
		return x.SigningIdentity
	}
	return nil
}

func (x *MayyMSPConfig) GetOrganizationUnitIdentifiers() []*MayyOUIdentifier {
	if x != nil {
		return x.OrganizationUnitIdentifiers
	}
	return nil
}

func (x *MayyMSPConfig) GetCryptoConfig() *MayyCryptoConfig {
	if x != nil {
		return x.CryptoConfig
	}
	return nil
}

func (x *MayyMSPConfig) GetTlsRootCerts() [][]byte {
	if x != nil {
		return x.TlsRootCerts
	}
	return nil
}

func (x *MayyMSPConfig) GetTlsIntermediateCerts() [][]byte {
	if x != nil {
		return x.TlsIntermediateCerts
	}
	return nil
}

func (x *MayyMSPConfig) GetMayyNodeOus() *MayyNodeOUs {
	if x != nil {
		return x.MayyNodeOus
	}
	return nil
}

// MayyCryptoConfig 由 msp 维护，其内包含 msp 配置加密算法的配置信息。
type MayyCryptoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SignatureHashFunction 指定在签名和验证签名期间所使用的哈希算法。
	SignatureHashFunction string `protobuf:"bytes,1,opt,name=signature_hash_function,json=signatureHashFunction,proto3" json:"signature_hash_function,omitempty"`
	// IdentityIdentifierHashFunction 指定在计算 msp 身份标识符时所使用的哈希算法。
	IdentityIdentifierHashFunction string `protobuf:"bytes,2,opt,name=identity_identifier_hash_function,json=identityIdentifierHashFunction,proto3" json:"identity_identifier_hash_function,omitempty"`
}

func (x *MayyCryptoConfig) Reset() {
	*x = MayyCryptoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MayyCryptoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MayyCryptoConfig) ProtoMessage() {}

func (x *MayyCryptoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MayyCryptoConfig.ProtoReflect.Descriptor instead.
func (*MayyCryptoConfig) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{2}
}

func (x *MayyCryptoConfig) GetSignatureHashFunction() string {
	if x != nil {
		return x.SignatureHashFunction
	}
	return ""
}

func (x *MayyCryptoConfig) GetIdentityIdentifierHashFunction() string {
	if x != nil {
		return x.IdentityIdentifierHashFunction
	}
	return ""
}

// SigningIdentityInfo 表示与对等端用于生成背书的签名标识相关的配置信息。
type SigningIdentityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PublicSigner 内持有签名标识的公共信息，对于采用 X.509 的 msp 提供商，
	// 此字段将会是 X.509 证书。
	PublicSigner []byte `protobuf:"bytes,1,opt,name=public_signer,json=publicSigner,proto3" json:"public_signer,omitempty"`
	// PrivateSigner 表示 peer 的签名标识的私钥。
	PrivateSigner *KeyInfo `protobuf:"bytes,2,opt,name=private_signer,json=privateSigner,proto3" json:"private_signer,omitempty"`
}

func (x *SigningIdentityInfo) Reset() {
	*x = SigningIdentityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SigningIdentityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SigningIdentityInfo) ProtoMessage() {}

func (x *SigningIdentityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SigningIdentityInfo.ProtoReflect.Descriptor instead.
func (*SigningIdentityInfo) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{3}
}

func (x *SigningIdentityInfo) GetPublicSigner() []byte {
	if x != nil {
		return x.PublicSigner
	}
	return nil
}

func (x *SigningIdentityInfo) GetPrivateSigner() *KeyInfo {
	if x != nil {
		return x.PrivateSigner
	}
	return nil
}

// KeyInfo 表示已经存储在 csp/keystore 中或将导入 csp 密钥库的密钥材料中的(秘密)密钥。
type KeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KeyIdentifier 表示密钥标识符，即密钥的 SKI。
	KeyIdentifier string `protobuf:"bytes,1,opt,name=key_identifier,json=keyIdentifier,proto3" json:"key_identifier,omitempty"`
	// KeyMaterial 导入密钥时所需的材料。
	KeyMaterial []byte `protobuf:"bytes,2,opt,name=key_material,json=keyMaterial,proto3" json:"key_material,omitempty"`
}

func (x *KeyInfo) Reset() {
	*x = KeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInfo) ProtoMessage() {}

func (x *KeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInfo.ProtoReflect.Descriptor instead.
func (*KeyInfo) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{4}
}

func (x *KeyInfo) GetKeyIdentifier() string {
	if x != nil {
		return x.KeyIdentifier
	}
	return ""
}

func (x *KeyInfo) GetKeyMaterial() []byte {
	if x != nil {
		return x.KeyMaterial
	}
	return nil
}

// MayyOUIdentifier 表示组织单元及其相关的信任标识符链。
type MayyOUIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Certificate 代表证书链中的第二个证书。(注意，证书链中的第一个证书应该是一个身份的证书)。
	// 它必须与根证书或中间 CA 的证书相对应，MSP 可以识别该消息所属的 CA。从这个证书开始，计算
	// 出一个证书链并绑定到指定的 OrganizationUnitIdentifier。
	Certificate []byte `protobuf:"bytes,1,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// OrganizationUnitIdentifier 定义了 MSP 下标识的组织单元。
	OrganizationUnitIdentifier string `protobuf:"bytes,2,opt,name=organization_unit_identifier,json=organizationUnitIdentifier,proto3" json:"organization_unit_identifier,omitempty"`
}

func (x *MayyOUIdentifier) Reset() {
	*x = MayyOUIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MayyOUIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MayyOUIdentifier) ProtoMessage() {}

func (x *MayyOUIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MayyOUIdentifier.ProtoReflect.Descriptor instead.
func (*MayyOUIdentifier) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{5}
}

func (x *MayyOUIdentifier) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

func (x *MayyOUIdentifier) GetOrganizationUnitIdentifier() string {
	if x != nil {
		return x.OrganizationUnitIdentifier
	}
	return ""
}

// MayyNodeOUs 包含基于 OU 区分客户端、对等端和订购者的配置。如果 NodeOUs 识别被启用，那么不包
// 含任何指定 OU 的 MSP 标识将被认为无效。
type MayyNodeOUs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enable 如果为真，则不包含指定的任何 OU 的 msp 标识将被认为无效。
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// ClientOuIdentifier 表示客户端的 OU 标识符。
	ClientOuIdentifier *MayyOUIdentifier `protobuf:"bytes,2,opt,name=client_ou_identifier,json=clientOuIdentifier,proto3" json:"client_ou_identifier,omitempty"`
	// PeerOuIdentifier 表示 peer 的 OU 标识符。
	PeerOuIdentifier *MayyOUIdentifier `protobuf:"bytes,3,opt,name=peer_ou_identifier,json=peerOuIdentifier,proto3" json:"peer_ou_identifier,omitempty"`
	// AdminOuIdentifier 表示 admin 的 OU 标识符。
	AdminOuIdentifier *MayyOUIdentifier `protobuf:"bytes,4,opt,name=admin_ou_identifier,json=adminOuIdentifier,proto3" json:"admin_ou_identifier,omitempty"`
	// OrdererOuIdentifier 表示 orderer 的 OU 标识符。
	OrdererOuIdentifier *MayyOUIdentifier `protobuf:"bytes,5,opt,name=orderer_ou_identifier,json=ordererOuIdentifier,proto3" json:"orderer_ou_identifier,omitempty"`
}

func (x *MayyNodeOUs) Reset() {
	*x = MayyNodeOUs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MayyNodeOUs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MayyNodeOUs) ProtoMessage() {}

func (x *MayyNodeOUs) ProtoReflect() protoreflect.Message {
	mi := &file_msp_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MayyNodeOUs.ProtoReflect.Descriptor instead.
func (*MayyNodeOUs) Descriptor() ([]byte, []int) {
	return file_msp_config_proto_rawDescGZIP(), []int{6}
}

func (x *MayyNodeOUs) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *MayyNodeOUs) GetClientOuIdentifier() *MayyOUIdentifier {
	if x != nil {
		return x.ClientOuIdentifier
	}
	return nil
}

func (x *MayyNodeOUs) GetPeerOuIdentifier() *MayyOUIdentifier {
	if x != nil {
		return x.PeerOuIdentifier
	}
	return nil
}

func (x *MayyNodeOUs) GetAdminOuIdentifier() *MayyOUIdentifier {
	if x != nil {
		return x.AdminOuIdentifier
	}
	return nil
}

func (x *MayyNodeOUs) GetOrdererOuIdentifier() *MayyOUIdentifier {
	if x != nil {
		return x.OrdererOuIdentifier
	}
	return nil
}

var File_msp_config_proto protoreflect.FileDescriptor

var file_msp_config_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x70, 0x6d, 0x73, 0x70, 0x22, 0x37, 0x0a, 0x09, 0x4d, 0x53, 0x50, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xa4, 0x04, 0x0a, 0x0d, 0x4d, 0x61, 0x79, 0x79, 0x4d, 0x53, 0x50, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x6f, 0x6f,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x1d,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e, 0x4d, 0x61, 0x79, 0x79, 0x4f,
	0x55, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x1b, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e, 0x4d, 0x61, 0x79, 0x79, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x74,
	0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74,
	0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x6c, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x35, 0x0a, 0x0d, 0x6d, 0x61, 0x79, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6f,
	0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e,
	0x4d, 0x61, 0x79, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x55, 0x73, 0x52, 0x0b, 0x6d, 0x61, 0x79,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x75, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x79,
	0x79, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x70, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e, 0x4b, 0x65, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x22, 0x53, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0x76, 0x0a, 0x10, 0x4d, 0x61, 0x79, 0x79, 0x4f,
	0x55, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a,
	0x1c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22,
	0xc9, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x79, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x55, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x6f, 0x75, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e, 0x4d, 0x61, 0x79,
	0x79, 0x4f, 0x55, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x12, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x6d, 0x73, 0x70, 0x2e, 0x4d, 0x61, 0x79, 0x79, 0x4f, 0x55, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x4f, 0x75, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6f, 0x75, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e, 0x4d, 0x61, 0x79, 0x79,
	0x4f, 0x55, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x4f, 0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x4a, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x6d, 0x73, 0x70, 0x2e, 0x4d, 0x61, 0x79, 0x79, 0x4f, 0x55, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x4f,
	0x75, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x1f, 0x5a, 0x1d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x31, 0x31, 0x30, 0x39, 0x30, 0x38,
	0x31, 0x35, 0x2f, 0x6d, 0x61, 0x79, 0x79, 0x2f, 0x70, 0x6d, 0x73, 0x70, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msp_config_proto_rawDescOnce sync.Once
	file_msp_config_proto_rawDescData = file_msp_config_proto_rawDesc
)

func file_msp_config_proto_rawDescGZIP() []byte {
	file_msp_config_proto_rawDescOnce.Do(func() {
		file_msp_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_msp_config_proto_rawDescData)
	})
	return file_msp_config_proto_rawDescData
}

var file_msp_config_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_msp_config_proto_goTypes = []interface{}{
	(*MSPConfig)(nil),           // 0: pmsp.MSPConfig
	(*MayyMSPConfig)(nil),       // 1: pmsp.MayyMSPConfig
	(*MayyCryptoConfig)(nil),    // 2: pmsp.MayyCryptoConfig
	(*SigningIdentityInfo)(nil), // 3: pmsp.SigningIdentityInfo
	(*KeyInfo)(nil),             // 4: pmsp.KeyInfo
	(*MayyOUIdentifier)(nil),    // 5: pmsp.MayyOUIdentifier
	(*MayyNodeOUs)(nil),         // 6: pmsp.MayyNodeOUs
}
var file_msp_config_proto_depIdxs = []int32{
	3, // 0: pmsp.MayyMSPConfig.signing_identity:type_name -> pmsp.SigningIdentityInfo
	5, // 1: pmsp.MayyMSPConfig.organization_unit_identifiers:type_name -> pmsp.MayyOUIdentifier
	2, // 2: pmsp.MayyMSPConfig.crypto_config:type_name -> pmsp.MayyCryptoConfig
	6, // 3: pmsp.MayyMSPConfig.mayy_node_ous:type_name -> pmsp.MayyNodeOUs
	4, // 4: pmsp.SigningIdentityInfo.private_signer:type_name -> pmsp.KeyInfo
	5, // 5: pmsp.MayyNodeOUs.client_ou_identifier:type_name -> pmsp.MayyOUIdentifier
	5, // 6: pmsp.MayyNodeOUs.peer_ou_identifier:type_name -> pmsp.MayyOUIdentifier
	5, // 7: pmsp.MayyNodeOUs.admin_ou_identifier:type_name -> pmsp.MayyOUIdentifier
	5, // 8: pmsp.MayyNodeOUs.orderer_ou_identifier:type_name -> pmsp.MayyOUIdentifier
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_msp_config_proto_init() }
func file_msp_config_proto_init() {
	if File_msp_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msp_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MSPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MayyMSPConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MayyCryptoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SigningIdentityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MayyOUIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MayyNodeOUs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msp_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msp_config_proto_goTypes,
		DependencyIndexes: file_msp_config_proto_depIdxs,
		MessageInfos:      file_msp_config_proto_msgTypes,
	}.Build()
	File_msp_config_proto = out.File
	file_msp_config_proto_rawDesc = nil
	file_msp_config_proto_goTypes = nil
	file_msp_config_proto_depIdxs = nil
}
